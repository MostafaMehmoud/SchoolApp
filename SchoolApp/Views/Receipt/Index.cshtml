@using SchoolApp.DAL.Models
@using SchoolApp.DAL.ViewModels

@model VWReceipt
@using Microsoft.AspNetCore.Identity
@using SchoolApp.DAL.Models
@using SchoolApp.DAL.ViewModels
@inject UserManager<ApplicationUser> UserManager

@{
    var currentUser = await UserManager.GetUserAsync(User);
}
<style>
    /* تقليل حجم المدخلات */
    .custom-input {
        font-size: 0.85rem;
        padding: 0.25rem 0.5rem;
    }

    /* تقليل الهوامش بين الحقول */
    .custom-form-group {
        margin-bottom: 0.5rem;
    }

    /* تقليل الهوامش حول الأزرار */
    .custom-button {
        margin: 0.2rem;
        padding: 0.3rem 0.5rem;
    }

</style>
<div class="col-12 grid-margin stretch-card">
    <div class="card">
        <div class="d-flex justify-content-between">
            <div class="m-0">
                <h1 class="card-title text-dark font-weight-bold fs-2"> سندات قبض</h1>
            </div>
            @if (currentUser.Level == UserLevels.Admin || currentUser.Level == UserLevels.View || currentUser.Level == UserLevels.EditAdd)
            {
                <div class="d-flex justify-content-end navigation-buttons">
                    <div class="btn btn-primary btn-sm custom-button" id="btnMin">
                        <i class="fa fa-angle-double-right"></i>
                    </div>
                    <div class="btn btn-primary btn-sm custom-button" id="btnPrevious">
                        <i class="fa fa-angle-right"></i>
                    </div>
                    <div class="btn btn-primary btn-sm custom-button" id="btnNext">
                        <i class="fa fa-angle-left"></i>
                    </div>
                    <div class="btn btn-primary btn-sm custom-button" id="btnMax">
                        <i class="fa fa-angle-double-left"></i>
                    </div>
                </div>
            }
            else
            {
                <div class="d-flex justify-content-end navigation-buttons">
                </div>
            }

        </div>

        <div class="card-body">
            <form id="receiptForm" class="forms-sample">
                <!-- Static Fields -->
                <div class="errorContainer">
                </div>
                <input type="hidden"  id="receiptId" asp-for="Id" />
                <div class="row custom-form-group">
                    <div class="col-md-6">
                        <label class="fs-6">رقم السند </label>
                        <input type="number" asp-for="Code" id="receiptCodeInput" class="form-control form-control-sm ">
                    </div>
                    <div class="col-md-6">
                        <label class="fs-6"> تاريخ اليوم</label>
                        <input readonly type="date" asp-for="ReceiptDate" id="receiptDateInput" class="form-control form-control-sm ">
                    </div>
                    
                </div>
                <!-- Additional Static Fields e.g., Books Fee, Registration Fee, Uniform Fee -->
                <div class="row custom-form-group">
                    <div class="col-md-4">
                        <label class="fs-6">رقم الطالب </label>
                        <select id="studentSelect" asp-for="StudentId" asp-items="ViewBag.listStudents" class="form-control form-control-sm ">
                            <option value="0">اختر الطالب</option>
                        </select>
                    </div>
                    <div class="col-md-8">
                        <label class="fs-6">اسم الطالب </label>
                        <input type="text" asp-for="StudentName" id="studentName" class="form-control form-control-sm ">
                    </div>
                  
                </div>
                <div class="row custom-form-group">
                    <div class="col-md-3">
                        <label class="fs-6">رسوم التسجيل  </label>
                        <input type="number" asp-for="CLSRegs" id="CLSRegs" class="form-control form-control-sm custom-input">

                    </div>
                    <div class="col-md-3">
                        <label class="fs-6">رسوم الكتب  </label>
                        <input type="number" asp-for="CLSAcpt" id="CLSAcpt" class="form-control form-control-sm custom-input">

                    </div>
                    <div class="col-md-3">
                        <label class="fs-6">رسوم الزي  </label>
                        <input type="number" id="CLSCloth" asp-for="CLSCloth" class="form-control form-control-sm custom-input">

                    </div>
                    <div class="col-md-3">
                        <label class="fs-6">رسوم الباكليت  </label>
                        <input type="number" asp-for=CLSBakelite id="CLSBakelite" class="form-control form-control-sm custom-input">

                    </div>
                </div>
                <!-- Dynamic Section for Semester Fees -->
                <div class="row row-cols-4 g-2" id="dynamicRows">
                    <!-- Dynamic rows will be appended here; they will have names: amounts[i].AmountPrice, amounts[i].AmountDate, amounts[i].receiptNameId -->
                </div>
                <div class="row custom-form-group">
                    <div class="col-md-6">
                        <label class="fs-6">رسوم الباص الفصل الاول  </label>
                        <input type="number" asp-for="ReceiptBusFirstTremCost"  id="cusCostFirstTrem" class="form-control form-control-sm custom-input">

                    </div>
                    <div class="col-md-6">
                        <label class="fs-6">رسوم الباص الفصل الثاني  </label>
                        <input type="number" asp-for="ReceiptBusSecondTremCost" id="cusCostSecondTrem" class="form-control form-control-sm custom-input">

                    </div>
                </div>
                <div class="row custom-form-group">
                    <div class="col-md-3">
                        <label class="fs-6">الرصيد السابق     </label>
                        <input type="number" asp-for="LastBalance" disabled id="lastBalance"  class="form-control form-control-sm ">
                    </div>
                    <div class="col-md-3">
                        <label class="fs-6">اجمالي الرسوم     </label>
                        <input type="number" asp-for="ReceiptTotalFees" disabled id="receiptTotalFees" class="form-control form-control-sm ">
                    </div>
                    <div class="col-md-3">
                        <label class="fs-6">   اجمالي المدفوع   </label>
                        <input type="number" asp-for="ReceiptTotalPayments" disabled id="receiptTotalPayments" class="form-control form-control-sm ">
                    </div>
                    <div class="col-md-3">
                        <label class="fs-6">    متبقي من الرسوم  </label>
                        <input type="number"asp-for="RemainingFees" disabled id="remainingFees" class="form-control form-control-sm">
                    </div>
                </div>
                <div class="row custom-form-group">
                    <div class="col-md-3">
                        <label class="fs-6">المبلغ</label>
                        <input type="number" asp-for="Amount" id="amount" class="form-control form-control-sm" min="0">
                    </div>
                    <div class="col-md-9">
                        <label class="fs-6">تفنيد المبلغ</label>
                        <input type="text" asp-for="AmountName" id="breakdown" class="form-control form-control-sm" readonly>
                        <input type="hidden" name="AmountName" id="hiddenBreakdown">

                    </div>
                </div>
                <div class="row custom-form-group">
                    <div class="col-md-4">
                        <label>نسبة الضريبة:</label>
                        <input type="text" id="taxRate" asp-for="TaxRate" class="form-control" value="@ViewBag.TaxRateCompany" readonly />
                    </div>

                    <div class="col-md-4">
                        <label>قيمة الضريبة:</label>
                        <input asp-for="TaxRateValue" type="text" id="taxValue" class="form-control" readonly />
                    </div>

                    <div class="col-md-4">
                        <label>الإجمالي بعد الضريبة:</label>
                        <input type="text" id="totalWithTax" asp-for="AmountAfterTaxRate" class="form-control" readonly />
                    </div>

			</div>
                <div class="row custom-form-group">
                    <div class="col-md-12">
                        <label class="fs-6">تفنيد المبلغ</label>
                        <input type="text" asp-for="AmountNameAfterTaxRate" id="breakdownAfterCalculate" class="form-control form-control-sm" readonly>
                        <input type="hidden" name="AmountNameAfterCalculate" id="hiddenBreakdownAfterCalculate">

                    </div>
            </div>
                 <br />
                 <hr />
                 <br />
                <div class="row custom-form-group">
                    <div class="col-md-3">
                        <label class="fs-6">   نوع الدفع  </label>
                        <select asp-for="CashCheque" class="form-control form-control-sm" id="paymentMethod" onchange="toggleChequeDetails()">
                            <option value="1"> شيك</option>
                            <option value="2"> نقدي</option>
                        </select>
                    </div>
                    <div class="col-md-9">
                        <label class="fs-6">   وذلك  </label>
                        <input asp-for="Purpose" type="text" id="purpose" class="form-control form-control-sm ">

                   </div>
                 </div>
                <div class="row custom-form-group" id="chequeDetails">
                    <div class="col-md-4">
                        <label class="fs-6"> رقم الشيك     </label>
                        <input type="number" asp-for="ChequeNumber" id="chequeNumber" class="form-control form-control-sm ">
                    </div>
                    <div class="col-md-4">
                        <label class="fs-6">   تاريخ الشيك    </label>
                        <input type="date" asp-for="ChequeDate" id="chequeDate" class="form-control form-control-sm ">
                    </div>
                    <div class="col-md-4">
                        <label class="fs-6">اسم البنك</label>
                        <input type="text" asp-for="BankName" id="bankName" class="form-control form-control-sm ">
                    </div>
                 </div>
                <!-- Submit Buttons -->
                <div class="form-group">
                    @if (currentUser.Level == UserLevels.Admin || currentUser.Level == UserLevels.Add || currentUser.Level == UserLevels.EditAdd)
                    {
                        <button type="button" class="btn btn-success btn-sm custom-button" id="btnAdd">حفظ</button>
                        <button type="button" id="btnPrint" class="btn btn-secondary btn-sm custom-button">الطباعة</button>
                    }
                    @if (currentUser.Level == UserLevels.Admin || currentUser.Level == UserLevels.EditAdd)
                    {
                        <button type="button" class="btn btn-secondary btn-sm custom-button" id="btnEdit">تعديل</button>
                        <button type="button" class="btn btn-danger btn-sm custom-button" id="btnDelete">حذف</button>
                    }
                    
                    
                </div>
            </form>

        </div>
    </div>
</div>
@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const amountInput = document.getElementById("amount");
            const taxRateInput = document.getElementById("taxRate");
            const taxValueInput = document.getElementById("taxValue");
            const totalWithTaxInput = document.getElementById("totalWithTax");

            const breakdown = document.getElementById("breakdown");
            const hiddenBreakdown = document.getElementById("hiddenBreakdown");

            const breakdownAfter = document.getElementById("breakdownAfterCalculate");
            const hiddenBreakdownAfter = document.getElementById("hiddenBreakdownAfterCalculate");

            amountInput.addEventListener("input", updateCalculations);
            updateCalculations();

            function updateCalculations() {
                const amount = parseFloat(amountInput.value) || 0;
                const taxRate = parseFloat(taxRateInput.value) || 0;
                const taxValue = amount * (taxRate / 100);
                const total = amount + taxValue;

                // تحديث الحقول
                taxValueInput.value = taxValue.toFixed(2);
                totalWithTaxInput.value = total.toFixed(2);

                // تحويل الرقم إلى كتابة
                const amountText = convertToArabicWords(Math.round(amount));
                const totalText = convertToArabicWords(Math.round(total));

                breakdown.value = amountText + " فقط لا غير";
                hiddenBreakdown.value = breakdown.value;

                breakdownAfter.value = totalText + " فقط لا غير";
                hiddenBreakdownAfter.value = breakdownAfter.value;
            }

            function convertToArabicWords(num) {
                if (num === 0) return "صفر جنيهاً مصرياً";

                const ones = ["", "واحد", "اثنان", "ثلاثة", "أربعة", "خمسة", "ستة", "سبعة", "ثمانية", "تسعة"];
                const tens = ["", "", "عشرون", "ثلاثون", "أربعون", "خمسون", "ستون", "سبعون", "ثمانون", "تسعون"];
                const teens = ["عشرة", "أحد عشر", "اثنا عشر", "ثلاثة عشر", "أربعة عشر", "خمسة عشر", "ستة عشر", "سبعة عشر", "ثمانية عشر", "تسعة عشر"];
                const hundreds = ["", "مائة", "مئتان", "ثلاثمائة", "أربعمائة", "خمسمائة", "ستمائة", "سبعمائة", "ثمانمائة", "تسعمائة"];

                function convertChunk(n) {
                    let result = "";
                    if (n >= 100) {
                        const h = Math.floor(n / 100);
                        const r = n % 100;
                        result += hundreds[h];
                        if (r > 0) result += " و " + convertChunk(r);
                        return result;
                    }
                    if (n >= 10 && n < 20) return teens[n - 10];
                    if (n >= 20) {
                        const t = Math.floor(n / 10);
                        const r = n % 10;
                        result += tens[t];
                        if (r > 0) result += " و " + ones[r];
                        return result;
                    }
                    return ones[n];
                }

                const words = [];
                if (num >= 1_000_000) {
                    const millions = Math.floor(num / 1_000_000);
                    words.push(millions === 1 ? "مليون" : millions === 2 ? "مليونان" : convertChunk(millions) + " ملايين");
                    num %= 1_000_000;
                }

                if (num >= 1000) {
                    const thousands = Math.floor(num / 1000);
                    words.push(thousands === 1 ? "ألف" : thousands === 2 ? "ألفان" : thousands <= 10 ? convertChunk(thousands) + " آلاف" : convertChunk(thousands) + " ألف");
                    num %= 1000;
                }

                if (num > 0) words.push(convertChunk(num));

                return words.filter(Boolean).join(" و ") + " جنيهاً مصرياً";
            }
        });
    </script>


    @* <script>
        $(document).ready(function () {
            $('#amount').on('input', function () {
                var amount = parseFloat($('#amount').val()) || 0;
                var taxRate = parseFloat($('#taxRate').val()) || 0;

                var taxValue = (amount * taxRate) / 100;
                var total = amount + taxValue;

                $('#taxValue').val(taxValue.toFixed(2));
                $('#totalWithTax').val(total.toFixed(2));
            });
        });
    </script> *@

<script>
     document.addEventListener("DOMContentLoaded", function () {
        // الحصول على تاريخ اليوم بتنسيق YYYY-MM-DD
        let today = new Date().toISOString().split("T")[0];

        // تعيين التاريخ في حقل الإدخال
        document.getElementById("receiptDateInput").value = today;
    });
</script>
    <script>
        $(document).on('click', '#btnPrint', function () {
            var id = $("#receiptId").val();

            if (!id || isNaN(id) || parseInt(id) <= 0) {
                Swal.fire({
                    icon: 'warning',
                    title: 'تنبيه',
                    text: 'يرجى تحديد سند صحيح للطباعة'
                });
                return;
            }

            window.open('/Receipt/Print?id=' + id, '_blank');
        });
    </script>

    <script>
        function toggleChequeDetails() {
            var paymentMethod = document.getElementById("paymentMethod").value;
            var chequeDetails = document.getElementById("chequeDetails");

            if (paymentMethod == "2") { // نقدي
                chequeDetails.style.display = "none";
            } else {
                chequeDetails.style.display = "flex"; // Show div
            }
        }

        // Run on page load to apply initial state
        window.onload = toggleChequeDetails;
    </script>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  
    <script>
        function calculateTotal() {
               let total = 0;

               // Loop through all input fields with the "custom-input" class
               $(".custom-input").each(function () {
                   let value = parseFloat($(this).val()) || 0;
                   total += value;
               });

               // Update the total amount field
               $("#amount").val(total.toFixed(2));
           }

           // Calculate total when the page loads
           calculateTotal();

           // Recalculate total whenever any input field changes
         
             $(document).ready(function () {

         $(document).on("input", ".custom-input", function () {
               calculateTotal();
           });
            $("#studentSelect").change(function () {
                var studentId =parseInt( $(this).val());
                       console.log(studentId)
                if (studentId == 0 || studentId === "") {
            Swal.fire({
                icon: 'warning',
                title: 'تنبيه',
                text: 'يرجى اختيار الطالب قبل المتابعة!',
                confirmButtonText: 'حسنًا'
            });
            return; // Stop execution
        }
                if (studentId) {
                    $.ajax({
                        url: '/Receipt/GetStudentDetailsCost', // Your controller action
                        type: 'GET',
                        data: { id: studentId },
                        success: function (response) {
                            if (response) {
                                console.log(response);

                                    $("#taxRate").val(response.taxRate);
                            
                                // Set student details
                                $("#studentName").val(response.studentName);
                                $("#CLSRegs").val(response.clsRegs);
                                $("#CLSAcpt").val(response.clsAcpt);
                                $("#CLSCloth").val(response.clsCloth);
                                $("#CLSBakelite").val(response.clsBakelite);
                                $("#cusCostFirstTrem").val(response.costFirstTermAfterDiscount);
                                $("#cusCostSecondTrem").val(response.costSecondTermAfterDiscount);
                                $("#lastBalance").val(response.lastBalance);
                                $("#receiptTotalFees").val(response.receiptTotalFees);
                                $("#receiptTotalPayments").val(response.receiptTotalPayments);
                                $("#remainingFees").val(response.remainingFees);

                                // Handle Installments
                                let container = $("#dynamicRows");
                                let html = ""; // Initialize html string

                                       if (response.installmentForStudents.length > 0) {
            response.installmentForStudents.forEach(item => {
                html += `
                    <div class="col">
                        <label class="form-label">${item.installmentName}</label>
                        <input type="number" class="form-control form-control-sm custom-input"
                               value="${item.costInstallment.toFixed(2)}"
                               data-id="${item.id}" >
                    </div>`;
            });
        } else {
            html += `
                <div class="col">
                    <label class="form-label">المبلغ الاجمالي</label>
                    <input type="number" class="form-control form-control-sm custom-input"
                           value="${response.totalCost.toFixed(2)}" >
                </div>`;
        }

        // Append the generated HTML to the container
        $("#dynamicRows").html(html);

        // Recalculate total amount after adding new inputs
        calculateTotal();


                                // Update the container with the new HTML content
                                
                            }
                        },
                        error: function () {
                            alert("حدث خطأ أثناء جلب البيانات.");
                        }
                    });
                } else {
                    $("#studentDetails").html("");
                }
            });
             $.ajax({
                url: '@Url.Action("GetNextCode", "Receipt")',
                type: 'GET',
                dataType: 'json',
                success: function (response) {
                    $('#receiptCodeInput').val(response.nextCode);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.error("Error retrieving the next code:", errorThrown);
                }
            });
                     $("#btnAdd").click(function () {
            var errors = "";
            $("#hiddenBreakdown").val($("#breakdown").val());
            $("#hiddenBreakdownAfterCalculate").val($("#breakdownAfterCalculate").val());
            // Clear previous errors
                var studentId = $("#studentSelect").val();
          if (studentId == "0" || studentId == 0) {
              errors += "يرجى اختيار  كود الطالب.<br/>";
          }
            $("#errorContainer").html("").hide();

            // Create a FormData object
            var formData = new FormData($("#receiptForm")[0]);

            // Collect installment data dynamically and append it to FormData
            $("#dynamicRows .col").each(function (index) {
                var costInstallment = $(this).find("input[type=number]").val();
                var installmentName = $(this).find("label").text().trim(); // Get label as name

                // Validate installment
                if (!costInstallment || parseFloat(costInstallment) <= 0) {
                    errors += `القسط ${installmentName} لا يمكن أن يكون فارغًا أو صفرًا<br/>`;
                }

                // Append to FormData (indexed for MVC model binding)
                formData.append(`InstallmentReceipts[${index}].CostInstallment`, costInstallment);
                formData.append(`InstallmentReceipts[${index}].InstallmentName`, installmentName);
            });

            // Show errors if any
            if (errors !== "") {
                Swal.fire("خطأ", errors, "error");
                return;
            }

            // Send form data via AJAX
            $.ajax({
                url: '@Url.Action("Add", "Receipt")',
                type: 'POST',
                data: formData,
                processData: false, // Prevent jQuery from converting FormData into a query string
                contentType: false, // Required for FormData to work properly
                success: function (response) {
                    if (response.success) {
                        Swal.fire("نجاح", response.message, "success").then(function () {
                            location.reload();
                        });
                    } else {
                        Swal.fire("خطأ", response.message, "error");
                    }
                },
                error: function () {
                    Swal.fire("خطأ", "حدث خطأ أثناء الإرسال", "error");
                }
            });
        });





          $("#btnDelete").click(function () {
            // Get the record's ID from a hidden field or another element
            var id = parseInt($("#receiptId").val());

            if (!Number.isInteger(id) || id <= 0) {
                Swal.fire("تنبيه", "يرجى تحديد سجل صحيح أولاً.", "warning");
                return;
            }

            // Show confirmation dialog
            Swal.fire({
                title: 'هل أنت متأكد؟',
                text: "لن تتمكن من التراجع عن هذا الإجراء!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'نعم، احذفها!',
                cancelButtonText: 'إلغاء'
            }).then((result) => {
                if (result.isConfirmed) {
                    // If confirmed, send the delete request
                    $.ajax({
                        url: '@Url.Action("Delete", "Receipt")',
                        type: 'POST',
                        data: { id: id },
                        success: function (response) {
                            if (response.success) {
                                Swal.fire("تم الحذف!", response.message, "success").then(function () {
                                    location.reload();
                                });
                            } else {
                                Swal.fire("خطأ", response.error || "حدث خطأ أثناء الحذف", "error");
                            }
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            Swal.fire("خطأ", "Error deleting data: " + errorThrown, "error");
                        }
                    });
                }
            });
        });

         // Handler for the Min button (gets record with minimum code)
                    $("#btnMin").click(async function () {
            try {
                const response = await $.ajax({
                    type: "GET",
                    url: '@Url.Action("GetMinReceipt", "Receipt")',
                    dataType: "json"
                });
                if (response) {
                    console.log(response)
                    // افترض أن الاستجابة تحتوي على الكائن بنفس أسماء الخصائص المذكورة في VWReceipt
                    $("#receiptId").val(response.id);
                    $("#receiptCodeInput").val(response.code);
                    $("#studentName").val(response.studentName);
                    $("#receiptDateInput").val(response.chequeDate);
                    $("#studentSelect").val(response.studentId);
                    $("#CLSRegs").val(response.clsRegs);
                    $("#CLSAcpt").val(response.clsAcpt);
                    $("#CLSCloth").val(response.clsCloth);
                    $("#CLSBakelite").val(response.clsBakelite);
                    $("#cusCostFirstTrem").val(response.receiptBusFirstTremCost);
                    $("#cusCostSecondTrem").val(response.receiptBusSecondTremCost);
                    $("#lastBalance").val(response.lastBalance);
                    $("#receiptTotalFees").val(response.receiptTotalFees);
                    $("#receiptTotalPayments").val(response.receiptTotalPayments);
                    $("#remainingFees").val(response.remainingFees);
                    $("#breakdown").val(response.amountName);
                    $("#paymentMethod").val(response.cashCheque);
                    $("#purpose").val(response.purpose);
                    $("#chequeNumber").val(response.chequeNumber);
                    $("#chequeDate").val(response.chequeDate);
                    $("#bankName").val(response.bankName);
                    $("#amount").val(response.amount);
                    $("#taxRate").val(response.taxRate);
                    $("#taxValue").val(response.taxRateValue);
                    $("#totalWithTax").val(response.amountAfterTaxRate);
                     $("#breakdownAfterCalculate").val(response.amountNameAfterTaxRate);
                } else {
                    Swal.fire("خطأ", "لم يتم العثور على سجلات.", "error");
                }
            } catch (error) {
                console.error("Error fetching minimum file bus:", error);
                Swal.fire("خطأ", "حدث خطأ أثناء جلب البيانات.", "error");
            }
        });


            // Handler for the Max button (gets record with maximum code)
            $("#btnMax").click(async function () {
                try {
                    const response = await $.ajax({
                        type: "GET",
                        url: '@Url.Action("GetMaxReceipt", "Receipt")',
                        dataType: "json"
                    });
                    if (response) {
                        console.log(response)
                       $("#receiptId").val(response.id);
                    $("#receiptCodeInput").val(response.code);
                    $("#studentName").val(response.studentName);
                    $("#receiptDateInput").val(response.chequeDate);
                    $("#studentSelect").val(response.studentId);
                    $("#CLSRegs").val(response.clsRegs);
                    $("#CLSAcpt").val(response.clsAcpt);
                    $("#CLSCloth").val(response.clsCloth);
                    $("#CLSBakelite").val(response.clsBakelite);
                    $("#cusCostFirstTrem").val(response.receiptBusFirstTremCost);
                    $("#cusCostSecondTrem").val(response.receiptBusSecondTremCost);
                    $("#lastBalance").val(response.lastBalance);
                    $("#receiptTotalFees").val(response.receiptTotalFees);
                    $("#receiptTotalPayments").val(response.receiptTotalPayments);
                    $("#remainingFees").val(response.remainingFees);
                    $("#breakdown").val(response.amountName);
                    $("#paymentMethod").val(response.cashCheque);
                    $("#purpose").val(response.purpose);
                    $("#chequeNumber").val(response.chequeNumber);
                    $("#chequeDate").val(response.chequeDate);
                    $("#bankName").val(response.bankName);
                    $("#amount").val(response.amount);
                     $("#taxRate").val(response.taxRate);
                    $("#taxValue").val(response.taxRateValue);
                    $("#totalWithTax").val(response.amountAfterTaxRate);
                     $("#breakdownAfterCalculate").val(response.amountNameAfterTaxRate);
                    } else {
                        Swal.fire("خطأ", "No records found.", "error");
                    }
                } catch (error) {
                    console.error("Error fetching max national:", error);
                    Swal.fire("خطأ", "Error fetching data.", "error");
                }
            });

            // Handler for the Previous button
            $("#btnPrevious").click(async function () {
                const receiptId =parseInt( $("#receiptId").val());
                console.log(receiptId)
                console.log(typeof( receiptId))

                // if (!busId) {
                //     Swal.fire("تنبيه", "Please select a record first.", "warning");
                //     return;
                // }
                try {
                    const response = await $.ajax({
                        type: "GET",
                        url: '@Url.Action("GetPreviousReceipt", "Receipt", new { id = "ID_PLACEHOLDER" })'.replace("ID_PLACEHOLDER", receiptId),
                        dataType: "json"
                    });
                    if (response) {
                      $("#receiptId").val(response.id);
                    $("#receiptCodeInput").val(response.code);
                    $("#studentName").val(response.studentName);
                    $("#receiptDateInput").val(response.chequeDate);
                    $("#studentSelect").val(response.studentId);
                    $("#CLSRegs").val(response.clsRegs);
                    $("#CLSAcpt").val(response.clsAcpt);
                    $("#CLSCloth").val(response.clsCloth);
                    $("#CLSBakelite").val(response.clsBakelite);
                    $("#cusCostFirstTrem").val(response.receiptBusFirstTremCost);
                    $("#cusCostSecondTrem").val(response.receiptBusSecondTremCost);
                    $("#lastBalance").val(response.lastBalance);
                    $("#receiptTotalFees").val(response.receiptTotalFees);
                    $("#receiptTotalPayments").val(response.receiptTotalPayments);
                    $("#remainingFees").val(response.remainingFees);
                    $("#breakdown").val(response.amountName);
                    $("#paymentMethod").val(response.cashCheque);
                    $("#purpose").val(response.purpose);
                    $("#chequeNumber").val(response.chequeNumber);
                    $("#chequeDate").val(response.chequeDate);
                    $("#bankName").val(response.bankName);
                    $("#amount").val(response.amount);
                     $("#taxRate").val(response.taxRate);
                    $("#taxValue").val(response.taxRateValue);
                    $("#totalWithTax").val(response.amountAfterTaxRate);
                     $("#breakdownAfterCalculate").val(response.amountNameAfterTaxRate);
                    } else {
                        Swal.fire("تنبيه", "No previous record found.", "info");
                    }
                } catch (error) {
                     // If the status code is 404, display a specific warning message.
        if (error.status == 404) {
            Swal.fire("تنبيه", "لا يوجد سند  قبل تلك", "info");
        } else {
            console.error("Error fetching previous national:", error);
            Swal.fire("خطأ", "Error fetching data.", "error");
        }
                }
            });

            // Handler for the Next button
            $("#btnNext").click(async function () {
                const receiptId = parseInt($("#receiptId").val());
                 console.log(receiptId)
                console.log(typeof( receiptId))
                // if (!busId) {
                //     Swal.fire("تنبيه", "Please select a record first.", "warning");
                //     return;
                // }
                try {
                    const response = await $.ajax({
                        type: "GET",
                        url: '@Url.Action("GetNextReceipt", "Receipt", new { id = "ID_PLACEHOLDER" })'.replace("ID_PLACEHOLDER", receiptId),
                        dataType: "json"
                    });
                    if (response) {

                           console.log(response)
                         $("#receiptId").val(response.id);
                    $("#receiptCodeInput").val(response.code);
                    $("#studentName").val(response.studentName);
                    $("#receiptDateInput").val(response.chequeDate);
                    $("#studentSelect").val(response.studentId);
                    $("#CLSRegs").val(response.clsRegs);
                    $("#CLSAcpt").val(response.clsAcpt);
                    $("#CLSCloth").val(response.clsCloth);
                    $("#CLSBakelite").val(response.clsBakelite);
                    $("#cusCostFirstTrem").val(response.receiptBusFirstTremCost);
                    $("#cusCostSecondTrem").val(response.receiptBusSecondTremCost);
                    $("#lastBalance").val(response.lastBalance);
                    $("#receiptTotalFees").val(response.receiptTotalFees);
                    $("#receiptTotalPayments").val(response.receiptTotalPayments);
                    $("#remainingFees").val(response.remainingFees);
                    $("#breakdown").val(response.amountName);
                    $("#paymentMethod").val(response.cashCheque);
                    $("#purpose").val(response.purpose);
                    $("#chequeNumber").val(response.chequeNumber);
                    $("#chequeDate").val(response.chequeDate);
                    $("#bankName").val(response.bankName);
                    $("#amount").val(response.amount);
                     $("#taxRate").val(response.taxRate);
                    $("#taxValue").val(response.taxRateValue);
                    $("#totalWithTax").val(response.amountAfterTaxRate);
                     $("#breakdownAfterCalculate").val(response.amountNameAfterTaxRate);
                    } else {
                        Swal.fire("تنبيه", "No next record found.", "info");
                    }
                } catch (error) {
                    // If the status code is 404, display a specific warning message.
        if (error.status == 404) {
            Swal.fire("تنبيه", "لا يوجد  سند بعد تلك.", "info");
        } else {
            console.error("Error fetching previous national:", error);
            Swal.fire("خطأ", "Error fetching data.", "error");
        }
                }
            });

















        });
             
            

    </script>



















}