
@using SchoolApp.DAL.ViewModels
@model VWStudent


<style>
    .custom-input {
        font-size: 0.85rem;
        padding: 0.25rem 0.5rem;
    }

    .custom-button {
        margin: 0.2rem;
        padding: 0.3rem 0.5rem;
    }

    .custom-form-group {
        margin-bottom: 0.5rem;
    }
    /* تقليل الهوامش بين الحقول */
    .custom-form-group {
        margin-bottom: 0.5rem;
    }

    /* تقليل الهوامش حول الأزرار */
    .custom-button {
        margin: 0.2rem;
        padding: 0.3rem 0.5rem;
    }

</style>

<div class="col-12 grid-margin">
    <div class="card">
        <!-- قسم العنوان والأزرار -->
        <div class="d-flex justify-content-between align-items-center p-1">
            <div class="m-0">
                <h1 class="card-title text-dark font-weight-bold fs-4">ملف الطلبة </h1>
            </div>
            <div class="d-flex justify-content-end navigation-buttons">
                <div class="btn btn-primary btn-sm custom-button" id="btnMin">
                    <i class="fa fa-angle-double-right"></i>
                </div>
                <div class="btn btn-primary btn-sm custom-button" id="btnPrevious">
                    <i class="fa fa-angle-right"></i>
                </div>
                <div class="btn btn-primary btn-sm custom-button" id="btnNext">
                    <i class="fa fa-angle-left"></i>
                </div>
                <div class="btn btn-primary btn-sm custom-button" id="btnMax">
                    <i class="fa fa-angle-double-left"></i>
                </div>
            </div>
        </div>

        <!-- محتوى الكارد (المعلومات) -->
        <div class="card-body ">
            <form id="StudentForm" class="form-sample">
                <input type="hidden"  id="studentId" asp-for="Id" />
                <div class="p-3">
                <!-- صفوف الحقول -->
                <div class="row row-cols-3 g-2">
                          <div class="col-sm-6">
                                <label class="form-label">رقم الطالب</label>
                            <input required  asp-for="StudentNumber" type="text" class="form-control form-control-sm" id="studentCodeInput" readonly placeholder="ادخل رقم الطالب">
                            </div>
                    <div class="col-sm-3">
                        <label class="form-label">اسم القسم</label>
                            <select required asp-for="DepartmentId" asp-items="ViewBag.departments" id="departmentId" class="form-control form-control-sm">
                            <option>اختر القسم</option>
                        </select>
                            <span asp-validation-for="DepartmentId" class="text-danger"></span>
                    </div>
                        <div class="col-sm-3">
                            <label class="form-label">المرحلة</label>
                            <select required asp-for=StageId asp-items=" ViewBag.Stages" id="StageId" class="form-control form-control-sm">
                                <option>اختر المرحلة</option>
                            </select>
                            <span asp-validation-for="StageId" class="text-danger"></span>
                        </div>
                </div>

                <div  class="row row-cols-4 g-2" >
                    <div class="col">
                        <label class="form-label">اسم الطالب</label>
                        <input id="studentName" required maxlength="30" type="text" asp-for="StudentName" class="form-control form-control-sm" placeholder="ادخل اسم الطالب">
                            <span asp-validation-for="StudentName" class="text-danger"></span>
                    </div>
                    <div class="col">
                        <label class="form-label">اسم الاب</label>
                            <input id="fatherName" required maxlength="30" asp-for="FatherName" type="text" class="form-control form-control-sm" placeholder="ادخل اسم الاب">
                            <span asp-validation-for="FatherName" class="text-danger"></span>
                        </div>
                    <div class="col">
                        <label class="form-label">اسم الجد</label>
                            <input id="grandFatherName" required maxlength="30" asp-for="GrandFatherName" type="text" class="form-control form-control-sm" placeholder="ادخل اسم الجد">
                            <span asp-validation-for="GrandFatherName" class="text-danger"></span>
                        </div>
                    <div class="col">
                        <label class="form-label">اسم العائلة</label>
                            <input id="familyName" required maxlength="30" type="text" asp-for="FamilyName" class="form-control form-control-sm" placeholder="ادخل اسم العائلة">
                            <span asp-validation-for="FamilyName" class="text-danger"></span>
                        </div>
                   
                    
                   
                   
                </div>
                <div class="row row-cols-4 g-2">
                    <div class="col">
                        <label class="form-label">تاريخ الميلاد</label>
                            <input id="brithDate" value="@(Model.BrithDate?.ToString("yyyy-MM-dd") ?? "")" required asp-for="BrithDate" type="date" class="form-control form-control-sm">
                            <span asp-validation-for="BrithDate" class="text-danger"></span>
                    </div>
                    <div class="col">
                        <label class="form-label">مكان الولادة</label>
                            <input id="brithPlace" required maxlength="100" asp-for="BrithPlace" type="text" class="form-control form-control-sm" placeholder="ادخل مكان الولادة">
                            <span asp-validation-for="BrithPlace" class="text-danger"></span>
                        </div>
                    
                    <div class="col">
                        <label class="form-label">الجنسية</label>
                            <select id="nationalId" required asp-for="NationalId" asp-items="ViewBag.nationals" class="form-control form-control-sm">
                            <option>اختر الجنسية</option>
                        </select>
                            <span asp-validation-for="NationalId" class="text-danger"></span>
                    </div>
                        <div class="col">
                            <label class="form-label d-block">الجنس</label>
                            <div class="pe-0 d-flex row ">
                                <div class="pe-0 row col d-flex justify-content-around me-1">
                                    <input checked type="radio" class="pe-0 col-sm-2" asp-for="GanderType" value="1">
                                    <label class="pe-0 form-check-label text-muted col-sm-10">ذكر</label>
                                </div>
                                <div class="pr-0 row col d-flex justify-content-around me-1">
                                    <input type="radio" class="pe-0 col-sm-2" asp-for="GanderType" value="2">
                                    <label class="pe-0 form-check-label text-muted col-sm-10">انثي</label>
                                </div>
                            </div>

                        </div>
                </div>
<br />
<hr />
                <div class="row row-cols-3 g-2">

                        <div class="col-sm-4">
                        <label class="form-label">الصف</label>
                        <select  required asp-for="ClassTypeId" id="classTypeId" class="form-control form-control-sm">
                            <option value="0">اختر الصف</option>
                            
                        </select>
                            <span asp-validation-for="ClassTypeId" class="text-danger"></span>
                    </div>
                        <div class="col-sm-4">
                        <label class="form-label">اسم الفصل</label>
                        <input id="classTypeName" required maxlength="30" asp-for="ClassTypeName" type="text" class="form-control form-control-sm" placeholder="ادخل اسم الفصل">
                            <span asp-validation-for="ClassTypeName" class="text-danger"></span>
                    </div>
                        <div class="col-sm-4">

                            <label class="form-label">الرصيد السابق </label>

                            <input id="lastBalance" asp-for="LastBalance" type="number" class="form-control form-control-sm" placeholder="ادخل الرصيد السابق ">

                        </div>




                </div>

               

                <div class="row row-cols-3 g-2 ">
                    <div class="col-sm-4">

                        <label class="form-label">المدرسة المنقول منها  </label>

                            <input id="lastSchoolName" asp-for="LastSchoolName" type="text" class="form-control form-control-sm" placeholder="ادخل اسم المدرسة ">
                          
                       
                    </div>
                        <div class="col-sm-4">
                            <label class="form-label"> دفعة مقدمة </label>
                            <input id="advanceRepayment" asp-for="AdvanceRepayment" type="number" class="form-control form-control-sm" placeholder="ادخل دفعة مقدمة">
                        </div>
                        <div class="col-sm-4">
                            <label class="form-label">القسط الشهري  </label>
                            <input type="number" id="monthlyInstallment" asp-for="MonthlyInstallment" class="form-control form-control-sm" placeholder="ادخل القسط الشهري ">
                        </div>
                </div>
                <div class="row row-cols-5 g-2">
                    <div class="col">
                        <label class="form-label">الحالة الشخصية</label>
                        <select id="personalStatusStudentId" required asp-for="PersonalStatusStudentId" class="form-control form-control-sm">
                            <option value="1">بطاقة احوال</option>
                            <option value="2">جواز سفر</option>
                            <option value="3">اقامة</option>
                        </select>
                            <span asp-validation-for="PersonalStatusStudentId" class="text-danger"></span>
                    </div>
                    <div class="col">
                        <label class="form-label">الرقم </label>
                            <input id="personalStatusStudentNumber" required maxlength="20" asp-for="PersonalStatusStudentNumber" type="text" class="form-control form-control-sm" placeholder="ادخل  الرقم">
                            <span asp-validation-for="PersonalStatusStudentNumber" class="text-danger"></span>
                    </div>
                    <div class="col">
                        <label class="form-label">تاريخ الاصدار </label>
                            <input id="personalStatusStudentStartDate" required value="@(Model.PersonalStatusStudentStartDate?.ToString("yyyy-MM-dd") ?? "")" asp-for="PersonalStatusStudentStartDate" type="date" class="form-control form-control-sm">
                            <span asp-validation-for="PersonalStatusStudentStartDate" class="text-danger"></span>
                    </div>
                    <div class="col">
                        <label class="form-label"> مكان الاصدار</label>
                            <input required id="personalStatusStudentPlace" maxlength="30" asp-for="PersonalStatusStudentPlace" type="text" class="form-control form-control-sm" placeholder="ادخل اسم العائلة">
                            <span asp-validation-for="PersonalStatusStudentPlace" class="text-danger"></span>
                    </div>

                    <div class="col">
                        <label class="form-label">تاريخ الانتهاء </label>
                            <input id="personalStatusStudentEndDate" value="@(Model.PersonalStatusStudentEndDate?.ToString("yyyy-MM-dd") ?? "")" required asp-for="PersonalStatusStudentEndDate" type="date" class="form-control form-control-sm">
                            <span asp-validation-for="PersonalStatusStudentEndDate" class="text-danger"></span>
                        </div>


                </div>
                <div class="row row-cols-4 g-2">

                    
                    <div class="col-sm-4">
                            <label class="form-label d-block">طريقة الدفع </label>
                        <div class="d-flex row">
                                
                                <div class="row col-sm-6 d-flex justify-content-around me-1">
                                    <input checked type="radio" class="col-sm-2" asp-for="PaymentTypeId" value="1">
                                    <label class="form-check-label text-muted col-sm-10">قسط</label>
                                </div>
                                <div class="row  col-sm-6 d-flex justify-content-around me-1">
                                    <input type="radio" class=" col-sm-2" asp-for="PaymentTypeId" value="2">
                                    <label class="form-check-label text-muted col-sm-10">مقدم</label>
                                </div>
                        </div>
                        
                    </div>
                    <div class="col-sm-8">
                        <label class="form-label d-block">فترة الالتحاق  </label>
                        <div class=" d-flex justify-content-start row">
                                <div class="row col-sm-4 d-flex justify-content-around me-1">
                                    <input checked asp-for="EnrollmentPeriodId" type="radio" class="col-sm-2" value="1">
                                    <label class="form-check-label text-muted col-sm-10">اول</label>
                                </div>
                                <div class="row col-sm-4 d-flex justify-content-around me-1">
                                    <input asp-for="EnrollmentPeriodId" type="radio" class=" col-sm-2"  value="2">
                                    <label class="form-check-label text-muted col-sm-10">الثاني</label>
                                </div>
                                <div class="row col-sm-4 d-flex justify-content-around me-1">
                                    <input asp-for="EnrollmentPeriodId" type="radio" class=" col-sm-2"  value="3">
                                    <label class="form-check-label text-muted col-sm-10">كامل</label>
                                </div>
                        </div>
                       
                    </div>
                </div>
                </div>
                <br />
                <hr />
                <br />
                @* //////////// *@
                <div class="p-3">
                <div class="row row-cols-3 g-2">
                    <div class="col-sm-6">
                        <label class="form-label">اسم ولي الامر</label>
                            <input id="guardianName" required maxlength="30" asp-for="GuardianName" type="text" class="form-control form-control-sm" placeholder="ادخل اسم ولي الامر">
                            <span asp-validation-for="GuardianName" class="text-danger"></span>
                    </div>
                    <div class="col-sm-3">
                        <label class="form-label">صلة القرابة</label>
                            <input id="kinship" required maxlength="30" asp-for="Kinship" type="text" class="form-control form-control-sm" placeholder="ادخل صلة القرابة">
                            <span asp-validation-for="Kinship" class="text-danger"></span>
                    </div>
                    <div class="col-sm-3">
                        <label class="form-label">الجنسية</label>
                            <select id="guardianNationalId" required asp-for="GuardianNationalId" asp-items="ViewBag.nationals" class="form-control form-control-sm">
                            <option>اختر الجنسية</option>
                        </select>
                            <span asp-validation-for="GuardianNationalId" class="text-danger"></span>
                    </div>





                </div>

                <div class="row row-cols-3 g-2 ">
                    <div class="col-sm-6">

                        <label class="form-label">جهة العمل  </label>

                        <input id="guardianSideWork" asp-for="GuardianSideWork" type="text" class="form-control form-control-sm" placeholder="ادخل جهة العمل ">


                    </div>
                    <div class="col-sm-3">

                        <label class="form-label"> الوظيفة </label>

                            <input id="guardianJob" required maxlength="50" asp-for="GuardianJob" type="number" class="form-control form-control-sm" placeholder="ادخل الوظيفة ">
                            <span asp-validation-for="GuardianJob" class="text-danger"></span>
                    </div>
                        <div class="col-sm-3">
                            <label class="form-label">رقم الجوال </label>
                            <input id="guardianMobile" required maxlength="15" asp-for="GuardianMobile" type="text" class="form-control form-control-sm" placeholder="ادخل رقم الجوال">
                            <span asp-validation-for="GuardianMobile" class="text-danger"></span>
                        </div>
                </div>
                <div class="row row-cols-3 g-2">
                    <div class="col-sm-6">
                        <label class="form-label">الايميل</label>
                            <input id="guardianEmail" asp-for="GuardianEmail" type="email" class="form-control form-control-sm" placeholder="ادخل الايميل الكتروني">
                    </div>
                    <div class="col-sm-3">
                        <label class="form-label">رمز البريدي </label>
                            <input id="guardianZipCode" asp-for="GuardianZipCode" type="text" class="form-control form-control-sm" placeholder="ادخل رمز البريدي">
                    </div>
                    <div class="col-sm-3">
                        <label class="form-label"> هاتف العمل </label>
                            <input id="guardianWorkMobile" asp-for="GuardianWorkMobile" type="text" class="form-control form-control-sm" placeholder="ادخل هاتف العمل">
                    </div>





                </div>
                    <div class="row row-cols-3 g-2">
                        <div class="col-sm-6">
                            <label class="form-label">اسم اقرب شخص </label>
                            <input id="nameOfClosestPerson" asp-for="NameOfClosestPerson" type="text" class="form-control form-control-sm" placeholder="ادخل اسم">
                        </div>

                        <div class="col-sm-3">
                            <label class="form-label">عنوان منزله</label>
                            <input id="houseLocationGuardian" asp-for="HouseLocationGuardian" type="text" class="form-control form-control-sm" placeholder="ادخل عنوان منزله">
                        </div>
                        <div class="col-sm-3">
                            <label class="form-label">هاتف المنزل</label>
                            <input id="houseMobileGuardian" asp-for="HouseMobileGuardian" type="text" class="form-control form-control-sm" placeholder="ادخل هاتف المنزل">
                        </div>




                    </div>
                <div class="row row-cols-3 g-2">
                        <div class="col-sm-6">
                            <label class="form-label">رقم الفاكس </label>
                            <input id="guardianFaxNumber" asp-for="GuardianFaxNumber" type="text" class="form-control form-control-sm" placeholder="ادخل رقم الفاكس">
                        </div>
                   
                    <div class="col-sm-6">
                        <label class="form-label d-block">من العاملين</label>
                        <div class="d-flex row ">
                                <div class="d-flex justify-content-around col-sm-6 row me-1">
                                    <input  checked asp-for="GuardianWorkingWithUs" type="radio" class="col-sm-2" value="1">
                                    <label class="form-check-label text-muted col-sm-10">نعم</label>
                                </div>
                                <div class="d-flex justify-content-around col-sm-6 row me-1">
                                    <input asp-for="GuardianWorkingWithUs" type="radio" class=" col-sm-2"  value="2">
                                    <label class="form-check-label text-muted col-sm-10">لا</label>
                                </div>
                        </div>
                       
                    </div>
                    
                </div>
                <div class="row row-cols-5 g-2">
                    <div class="col">
                        <label class="form-label">الحالة الشخصية</label>
                            <select id="personalStatusGuardianId" asp-for="PersonalStatusGuardianId" class="form-control form-control-sm">
                            <option value="1">بطاقة احوال</option>
                            <option value="2">جواز سفر</option>
                            <option value="3">اقامة</option>
                        </select>
                    </div>
                    <div class="col">
                        <label class="form-label">الرقم </label>
                            <input id="personalStatusGuardianNumber" required maxlength="20" asp-for="PersonalStatusGuardianNumber" type="text" class="form-control form-control-sm" placeholder="ادخل  الرقم">
                            <span asp-validation-for="PersonalStatusGuardianNumber" class="text-danger"></span>
                    </div>
                    <div class="col">
                        <label class="form-label">تاريخ الاصدار </label>
                            <input id="personalStatusGuardianStartDate" required value="@(Model.PersonalStatusGuardianStartDate?.ToString("yyyy-MM-dd") ?? "")" asp-for="PersonalStatusGuardianStartDate" type="date" class="form-control form-control-sm">
                            <span asp-validation-for="PersonalStatusGuardianStartDate" class="text-danger"></span>
                    </div>
                    <div class="col">
                        <label class="form-label"> مكان الاصدار</label>
                            <input id="personalStatusGuardianPlace" required maxlength="30" asp-for="PersonalStatusGuardianPlace" type="text" class="form-control form-control-sm" placeholder="ادخل اسم العائلة">
                            <span asp-validation-for="PersonalStatusGuardianPlace" class="text-danger"></span>
                    </div>

                    <div class="col">
                        <label class="form-label">تاريخ الانتهاء </label>
                            <input id="personalStatusGuardianEndDate" required value="@(Model.PersonalStatusGuardianEndDate?.ToString("yyyy-MM-dd") ?? "")" asp-for="PersonalStatusGuardianEndDate" type="date" class="form-control form-control-sm">
                            <span asp-validation-for="PersonalStatusGuardianEndDate" class="text-danger"></span>
                    </div>


                </div>
                </div>
              
                <div class=" p-3">
               
                
                    <br />
                    <hr />
                    <br />
                    <p> بيانات الام</p>
                    <div class="row row-cols-3 g-2">
                        <div class="col-sm-6">
                            <label class="form-label"> اسم ام الطالب    </label>
                            <input id="motherStudentName" required maxlength="30" asp-for="MotherStudentName" type="text" class="form-control form-control-sm" placeholder="ادخل اسم ام الطالب ">
                            <span asp-validation-for="MotherStudentName" class="text-danger"></span>
                        </div>
                        <div class="col-sm-3">
                            <label class="form-label"> صلة القرابة   </label>
                            <input id="kinshipMother" required maxlength="30" type="text" asp-for="KinshipMother" class="form-control form-control-sm" placeholder="ادخل  صلة القرابة  ">
                            <span asp-validation-for="KinshipMother" class="text-danger"></span>
                        </div>
                        <div class="col-sm-3">
                            <label class="form-label">الجنسية</label>
                            <select id="motherNationalId" required asp-for="MotherNationalId" asp-items="ViewBag.nationals" class="form-control form-control-sm">
                                <option>اختر الجنسية</option>
                            </select>
                            <span asp-validation-for="MotherNationalId" class="text-danger"></span>
                        </div>





                    </div>
                    <div class="row row-cols-3 g-2">
                        <div class="col-sm-6">
                            <label class="form-label">جهة العمل</label>
                            <input id="motherWork" asp-for="MotherWork" type="text" class="form-control form-control-sm" placeholder="ادخل جهة العمل ">
                        </div>
                        <div class="col-sm-3">
                            <label class="form-label"> رقم الفاكس    </label>
                            <input id="motherFaxNumber" asp-for="MotherFaxNumber" type="text" class="form-control form-control-sm" placeholder="ادخل  رقم الفاكس  ">
                        </div>

                        <div class="col-sm-3">
                            <label class="form-label">هاتف العمل</label>
                            <input id="motherWorkMobile" asp-for="MotherWorkMobile" type="text" class="form-control form-control-sm" placeholder="ادخل  هاتف العمل   ">
                        </div>




                    </div>
                    <div class="row row-cols-2 g-2">
                        <div class="col-sm-6">
                            <label class="form-label">الوظيفة</label>
                            <input id="motherJob" required maxlength="30" asp-for="MotherJob" type="text" class="form-control form-control-sm" placeholder="ادخل الوظيفة ">
                            <span asp-validation-for="MotherJob" class="text-danger"></span>
                        </div>
                        <div class="col-sm-6">
                            <label class="form-label">رقم الجوال</label>
                            <input id="motherMobilePhone" required maxlength="30" asp-for="MotherMobilePhone" type="text" class="form-control form-control-sm" placeholder="ادخل رقم الجوال  ">
                            <span asp-validation-for="MotherMobilePhone" class="text-danger"></span>
                        </div>






                    </div>
                    <div class="row row-cols-1 g-2">
                        <div class="col-sm-12">
                            <label class="form-label">الملاحظات </label>
                            <input id="notes" asp-for="Notes" type="text" class="form-control form-control-sm" placeholder="ادخل الملاحظات  ">

                        </div>
                    </div>
                
                <br />
                <hr />
                <br />
                <p>بيانات الرسوم</p>
                <div id="installmentsContainer" class="row row-cols-4 g-2">
                    <p  class="text-muted w-100"> يتم تحميل أي بيانات بعد تحديد الفصل و المرحلة.</p>
                </div>
                <br />
                <div class="row row-cols-2 g-3">
                    <!-- رسوم الزي -->
                    <div class="col">
                        <div class="d-flex align-items-center p-2 border rounded shadow-sm">
                            <label class="form-label flex-grow-1">ايراد الزي</label>
                            <input  type="number" readonly id="CLSCloth" class="form-control form-control-sm w-25 text-center additional-input" data-value="0">
                            <input type="checkbox" id="checkCLSCloth" class="form-check-input ms-2 additional-checkbox" data-label="ايراد الزي">
                        </div>
                    </div>

                    <!-- رسوم الكتب -->
                    <div class="col">
                        <div class="d-flex align-items-center p-2 border rounded shadow-sm">
                            <label class="form-label flex-grow-1">رسوم الكتب</label>
                                <input  type="number" readonly id="CLSAcpt" class="form-control form-control-sm w-25 text-center additional-input" data-value="0">
                            <input id="checkCLSAcpt" type="checkbox" class="form-check-input ms-2 additional-checkbox" data-label="رسوم الكتب">
                        </div>
                    </div>

                    <!-- رسوم البوكليت -->
                    <div class="col">
                        <div class="d-flex align-items-center p-2 border rounded shadow-sm">
                            <label class="form-label flex-grow-1">البوكليت</label>
                                <input   type="number" readonly id="CLSBakelite" class="form-control form-control-sm w-25 text-center additional-input" data-value="0">
                            <input id="checkCLSBakelite" type="checkbox" class="form-check-input ms-2 additional-checkbox" data-label="البوكليت">
                        </div>
                    </div>

                    <!-- رسوم التسجيل (دائمًا محدد وغير قابل للتعديل) -->
                    <div class="col">
                        <div class="d-flex align-items-center p-2 border rounded shadow-sm bg-light">
                            <label class="form-label flex-grow-1">رسوم التسجيل</label>
                            <input asp-for="CLSRegs" type="number" id="CLSRegs" class="form-control form-control-sm w-25 text-center" data-value="0" readonly>
                            <input type="checkbox" class="form-check-input ms-2" checked disabled>
                        </div>
                    </div>
                </div>
                </div>
                <div class=" d-flex align-items-center gap-2">
                    <input asp-for="AreYouWantGoWithBusSchool" class="form-check-input" type="checkbox" role="switch" id="showDivBus" checked>
                    <label class="form-check-label fw-bold mb-0" for="showDivBus">هل تريد الذهاب بالباص المدرسي؟</label>
                </div>

                <div id="divBus" class="row row-cols-4 g-2">
                   
                    
                  <div class="col-sm-3">
                        <label class="form-label">اتجاه السير </label>
                        <select asp-for="DirectionBus" id="busCostTypeId" class="form-control form-control-sm">
                            <option value="1"> ذهب و عودة</option>
                            <option value="2">الذهب فقط </option>
                            <option value="3">العودة فقط</option>
                        </select>
                    </div>
                   <div class="col-sm-3">
                        <label class="form-label">الباص </label>
                        <select asp-for="BusId" asp-items=" ViewBag.buses" id="buscostId" class="form-control form-control-sm">
                            <option value="0"> اختر الباص</option>
                           
                        </select>
                    </div>
                   <div class="col-sm-3">
                        <label class="form-label">الفصل الاول </label>
                        <input asp-for="CostFirstTermBeforeDiscount" readonly type="number" id="costFirstTrem" class="form-control form-control-sm">
                    </div>
                    <div class="col-sm-3">
                        <label class="form-label"> الفصل الثاني </label>
                        <input readonly asp-for="CostSecondTermBeforeDiscount" id="costSecondTrem" type="number" class="form-control form-control-sm">
                    </div>




                </div>
                <br />
                <hr />
                <br />
                <p>بيانات الخصم</p>
                <div class="row row-cols-4 g-2">
                    <div class="col">
                        <label class="form-label">% خصم عام</label>
                        <input asp-for="GeneralDiscount" type="number" id="generalDiscount" class="form-control form-control-sm discount-input discount-percentage">
                    </div>
                    <div class="col">
                        <label class="form-label">% خصم أبناء العاملين</label>
                        <input asp-for="EmployeeDiscount" type="number" id="employeeDiscount" class="form-control form-control-sm discount-input discount-percentage">
                    </div>
                    <div class="col">
                        <label class="form-label">خصم تعجيل الدفع</label>
                        <input asp-for="EarlyPaymentDiscount" type="number" id="earlyPaymentDiscount" class="form-control form-control-sm discount-input discount-fixed">
                    </div>
                    <div class="col">
                        <label class="form-label">خصم الأشقاء</label>
                        <input asp-for="SiblingsDiscount" type="number" id="siblingsDiscount" class="form-control form-control-sm discount-input discount-fixed">
                    </div>
                </div>

                <div class="row row-cols-4 g-2">
                    <div class="col">
                        <label class="form-label">صندوق رعاية الجاليات</label>
                        <input asp-for="CommunityFundDiscount" type="number" id="communityFundDiscount" class="form-control form-control-sm discount-input discount-fixed">
                    </div>
                    <div class="col">
                        <label class="form-label">خصم خاص</label>
                        <input asp-for="SpecialDiscount" type="number" id="specialDiscount" class="form-control form-control-sm discount-input discount-fixed">
                    </div>
                    <div class="col">
                        <label class="form-label">قيمة خصم</label>
                        <input asp-for="TotalDiscount" type="number" id="fixedDiscount" class="form-control form-control-sm discount-input discount-fixed">
                    </div>
                    <div class="col">
                        <label class="form-label">خصم باص</label>
                        <input asp-for="BusDiscount" type="number" id="busDiscount" class="form-control form-control-sm ">
                    </div>
                </div>



                <p>بيانات الخصم الاقساط</p>
                <div id="installmentsContainerAfterDiscount" class="row row-cols-4 g-2">
                    <p class="text-muted w-100"> يتم تحميل أي بيانات بعد تحديد الفصل و المرحلة.</p>
                </div>
                <div class="row row-cols-4 g-2" id="container">

                </div>
                <div class="row" id="DivBusAfterChoose">
                    <div class="col-sm-3">
                        <label class="form-label"> مصروف الباص لفصل الاول  </label>
                        <input asp-for="CostFirstTermAfterDiscount" readonly type="number" id="costFirstTremAfterChooseBus" class="form-control form-control-sm">
                    </div>
                    <div class="col-sm-3">
                        <label class="form-label"> مصروف الباص لفصل الثاني </label>
                        <input readonly asp-for="CostSecondTermAfterDiscount" id="costSecondTremAfterChooseBus" type="number" class="form-control form-control-sm">
                    </div>
                </div>
                
                <br />
                <hr />
                <br />
             
                <div class="form-group">
                    <button type="button" class="btn btn-success btn-sm custom-button" id="btnAdd">إضافة</button>
                    <button type="button" class="btn btn-secondary btn-sm custom-button" id="btnEdit">تعديل</button>
                    <button type="button" class="btn btn-danger btn-sm custom-button" id="btnDelete">حذف</button>
                </div>

            </form>
        </div>
    </div>
</div>
@section Scripts {
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>


    <script>
        //                       $(document).ready(function () {
        //     $(".installmentAmount").on("input", function () {
        //         let changedInput = $(this);
        //         let newValue = parseFloat(changedInput.val()) || 0;
        //         let id = changedInput.attr("data-id");
        //         console.log("🔹 القسط الذي تم تغييره:", id, "القيمة الجديدة:", newValue);

        //         let totalAmount = parseFloat($("#installmentsContainer").attr("data-total")) || 0;
        //         let otherInputs = $(".installmentAmount").not(`[data-id='${id}']`);
        //         let sumOtherInstallments = 0;
        //         alert("id",id)
        //         console.log("🔹 القسط الذي تم تغييره:", id, "القيمة الجديدة:", newValue);

        //         // حساب مجموع باقي الأقساط بدون القسط الذي تم تغييره
        //         otherInputs.each(function () {
        //             sumOtherInstallments += parseFloat($(this).val()) || 0;
        //         });

        //         // التحقق من تجاوز المجموع الكلي
        //         if (newValue + sumOtherInstallments > totalAmount) {
        //             Swal.fire("خطأ!", "إجمالي الأقساط تجاوز المبلغ الإجمالي!", "error");
        //             changedInput.val((totalAmount - sumOtherInstallments).toFixed(2));
        //             return;
        //         }

        //         // توزيع باقي المبلغ على الأقساط الأخرى
        //         let remainingAmount = totalAmount - newValue;
        //         let newAmountPerOther = (remainingAmount / otherInputs.length).toFixed(2);

        //         otherInputs.each(function () {
        //             $(this).val(newAmountPerOther);
        //         });

        //         console.log("🔹 تحديث القيم في installmentsContainerAfterDiscount");
        //         updateDiscountedInstallments(id, newValue);
        //     });

        //     function updateDiscountedInstallments(changedId, newValue) {
        //         console.log("🔹 تحديث installmentAmountReadonly:", changedId, "بقيمة:", newValue);

        //         let targetInput = $(`.installmentAmountReadonly[data-id='${changedId}']`);
        //         if (targetInput.length === 0) {
        //             console.warn("⚠️ لم يتم العثور على installmentAmountReadonly بالمعرف:", changedId);
        //             return;
        //         }

        //         targetInput.val(newValue.toFixed(2));

        //         $(".installmentAmount").each(function () {
        //             let id = $(this).attr("data-id");
        //             let value = parseFloat($(this).val()) || 0;

        //             let correspondingReadonly = $(`.installmentAmountReadonly[data-id='${id}']`);
        //             if (correspondingReadonly.length > 0) {
        //                 correspondingReadonly.val(value.toFixed(2));
        //             } else {
        //                 console.warn("⚠️ لم يتم العثور على القسط المناظر داخل installmentsContainerAfterDiscount:", id);
        //             }
        //         });

        //         let totalAfterChange = 0;
        //         $(".installmentAmountReadonly").each(function () {
        //             totalAfterChange += parseFloat($(this).val()) || 0;
        //         });

        //         $("#discountedTotalAmount").val(totalAfterChange.toFixed(2));
        //     }
        // });



                     $(document).ready(function () {
            $("#busDiscount").on("input", function () {
                let busDiscount = parseFloat($(this).val()) || 0; // قيمة الخصم المدخلة
                let firstTermCost = parseFloat($("#costFirstTrem").val()) || 0;
                let secondTermCost = parseFloat($("#costSecondTrem").val()) || 0;

                // منع إدخال قيمة سالبة
                if (busDiscount < 0) {
                    Swal.fire({
                        title: "خطأ!",
                        text: "لا يمكن إدخال نسبة خصم سالبة!",
                        icon: "error",
                        confirmButtonText: "حسناً"
                    });
                    $(this).val(0);
                    return;
                }

                let totalBusCost = firstTermCost + secondTermCost; // مجموع المصاريف
                let discountAmount = (busDiscount / 100) * totalBusCost; // حساب الخصم بالنسبة المئوية

                if (discountAmount > totalBusCost) {
                    Swal.fire({
                        title: "تنبيه!",
                        text: "إجمالي الخصم أكبر من مصاريف الباص!",
                        icon: "warning",
                        confirmButtonText: "حسناً"
                    });

                    // إعادة تعيين قيمة الخصم إلى 0
                    $(this).val(0);
                    return;
                }

                // توزيع الخصم بالتساوي على الفصلين
                let newFirstTermCost = firstTermCost - (discountAmount / 2);
                let newSecondTermCost = secondTermCost - (discountAmount / 2);

                // التأكد من أن القيم لا تصبح سالبة
                newFirstTermCost = Math.max(newFirstTermCost, 0);
                newSecondTermCost = Math.max(newSecondTermCost, 0);

                // تحديث القيم في الحقول
                $("#costFirstTremAfterChooseBus").val(newFirstTermCost.toFixed(2));
                $("#costSecondTremAfterChooseBus").val(newSecondTermCost.toFixed(2));

                // إظهار إجمالي الخصم
                $("#busDiscountAmount").text(`إجمالي الخصم المطبق: ${discountAmount.toFixed(2)} ج.م`);
            });
        });


              $(document).ready(function () {
            $("#showDivBus").change(function () {
                if ($(this).is(":checked")) {
                    $("#divBus").removeClass("d-none"); // عرض الـ divBus
                    $("#DivBusAfterChoose").removeClass("d-none"); // عرض الـ divBus
                } else {
                    $("#divBus").addClass("d-none"); // إخفاء الـ divBus
                    $("#DivBusAfterChoose").addClass("d-none"); // إخفاء الـ divBus
                     $("#costFirstTrem").val(0.0);
        $("#costFirstTremAfterChooseBus").val(0.0);
                $("#costSecondTrem").val(0.0);
                $("#costSecondTremAfterChooseBus").val(0.0);
                }
            });
        });
                      $(document).ready(function () {
            let totalAmount = 0, baseTotalAmount = 0;
            let installmentsData = [];

            $("#classTypeId").change(async function () {
                var stageId = parseInt($("#StageId").val());
                var classTypeId = parseInt($(this).val());

                if (!stageId || !classTypeId) {
                    Swal.fire("تنبيه", "يرجى اختيار المرحلة والصف", "warning");
                    return;
                }

                try {
                    const response = await $.ajax({
                        type: "GET",
                        url: '@Url.Action("GetInstallmentsByClassType", "Student")',
                        data: { stageId: stageId, classTypeId: classTypeId },
                        dataType: "json"
                    });

                    baseTotalAmount = response.installments.reduce((sum, item) => sum + (parseFloat(item.amountInstallment) || 0), 0);
                    totalAmount = baseTotalAmount;
                    installmentsData = response.installments;

                    $("#CLSAcpt").val(response.clsAcpt || 0).attr("data-value", response.clsAcpt || 0);
                    $("#CLSRegs").val(response.clsRegs || 0).attr("data-value", response.clsRegs || 0);
                    $("#cLSRegs").val(response.clsRegs || 0).attr("data-value", response.clsRegs || 0);
                    $("#CLSCloth").val(response.clsCloth || 0).attr("data-value", response.clsCloth || 0);
                    $("#CLSBakelite").val(response.clsBakelite || 0).attr("data-value", response.clsBakelite || 0);

                    displayInstallments("#installmentsContainer", installmentsData, baseTotalAmount, false);
                    displayInstallments("#installmentsContainerAfterDiscount", installmentsData, baseTotalAmount, true);

                    $(".installmentAmount").on("input", function () {
                        adjustInstallments($(this));
                    });

                    $(".additional-checkbox").change(function () {
                        updateTotalWithExtras();
                    });

                } catch (error) {
                    console.error("Error fetching installments:", error);
                    Swal.fire("خطأ", "حدث خطأ أثناء جلب البيانات", "error");
                }
            });
                    $(document).on("input", ".installmentAmount", function () {
            let id = $(this).data("id");
            let newValue = parseFloat($(this).val()) || 0;

            // تحديث الحقل readonly المقابل
            $(`.installmentAmountReadonly[data-id='${id}']`).val(newValue.toFixed(2));

            // تحديث بيانات القسط في المصفوفة
            let installment = installmentsData.find(i => i.id == id);
            if (installment) {
                installment.amountInstallment = newValue;
            }
        });
        function distributeInstallments(total) {
            let installmentInputs = $(".installmentAmount");
            let installmentCount = installmentInputs.length;

            if (installmentCount === 0) return;

            let currentTotalInstallments = installmentsData.reduce((sum, inst) => sum + inst.amountInstallment, 0);

            if (currentTotalInstallments === 0) {
                // توزيع المبلغ بالتساوي
                let newAmountPerInstallment = (total / installmentCount).toFixed(2);
                installmentInputs.each(function (index) {
                    $(this).val(newAmountPerInstallment);
                    installmentsData[index].amountInstallment = parseFloat(newAmountPerInstallment);
                });
            } else {
                // إعادة حساب القيم بناءً على النسب الأصلية
                installmentInputs.each(function (index) {
                    let originalValue = installmentsData[index].amountInstallment || 0;
                    let newInstallmentValue = parseFloat(((originalValue / currentTotalInstallments) * total).toFixed(2));

                    $(this).val(newInstallmentValue);
                    installmentsData[index].amountInstallment = newInstallmentValue;
                });
            }

            // تحديث جميع الحقول readonly
            $(".installmentAmountReadonly").each(function () {
                let id = $(this).data("id");
                let matchingInput = $(`.installmentAmount[data-id='${id}']`);
                if (matchingInput.length > 0) {
                    $(this).val(matchingInput.val());
                }
            });

            updateReadonlyInstallments();
        }
        function updateReadonlyInstallments() {
            $(".installmentAmountReadonly").each(function () {
                let id = $(this).data("id");
                let matchingInput = $(`.installmentAmount[data-id='${id}']`);
                if (matchingInput.length > 0) {
                    $(this).val(matchingInput.val());
                }
            });
        }

                               function applyDiscounts() {
            let generalDiscount = parseFloat($("#generalDiscount").val()) || 0;
            let employeeDiscount = parseFloat($("#employeeDiscount").val()) || 0;
            let earlyPaymentDiscount = parseFloat($("#earlyPaymentDiscount").val()) || 0;
            let siblingsDiscount = parseFloat($("#siblingsDiscount").val()) || 0;
            let communityFundDiscount = parseFloat($("#communityFundDiscount").val()) || 0;
            let specialDiscount = parseFloat($("#specialDiscount").val()) || 0;
           let fixedDiscount = parseFloat($("#fixedDiscount").val()) || 0;
            let busDiscount = parseFloat($("#busDiscount").val()) || 0;

            let generalDiscountAmount = (generalDiscount / 100) * baseTotalAmount;
            let employeeDiscountAmount = (employeeDiscount / 100) * baseTotalAmount;

            let totalDiscount = generalDiscountAmount + employeeDiscountAmount + earlyPaymentDiscount +
                siblingsDiscount + communityFundDiscount + specialDiscount + busDiscount;
               

            if (totalDiscount > baseTotalAmount) {
                Swal.fire("تنبيه", "إجمالي الخصومات أكبر من المبلغ الإجمالي!", "warning");
                return;
            }

            let discountedTotal = Math.max(0, baseTotalAmount - totalDiscount);
             $("#fixedDiscount").val(0.0);
                $("#fixedDiscount").val(totalDiscount.toFixed(2));
            $("#discountedTotalAmount").val(discountedTotal.toFixed(2));

            // تحديث الأقساط بعد الخصم
            distributeInstallments(discountedTotal);
        }



        //                      function distributeInstallments(total) {
        //     let installmentInputs = $(".installmentAmountReadonly");
        //     let installmentCount = installmentInputs.length;

        //     if (installmentCount === 0) {
        //         $("#installmentsContainerAfterDiscount").html(`
        //             <div class="col">
        //                 <label class="form-label">المبلغ الإجمالي بعد الخصم</label>
        //                 <input type="number" class="form-control form-control-sm" value="${total.toFixed(2)}" readonly>
        //             </div>
        //         `);
        //         return;
        //     }

        //     let currentTotalInstallments = installmentsData.reduce((sum, inst) => sum + inst.amountInstallment, 0);

        //     if (currentTotalInstallments === 0) {
        //         // توزيع المبلغ بالتساوي على جميع الأقساط
        //         let newAmountPerInstallment = (total / installmentCount).toFixed(2);
        //         installmentInputs.each(function (index) {
        //             $(this).val(newAmountPerInstallment);
        //             installmentsData[index].amountInstallment = parseFloat(newAmountPerInstallment);
        //         });
        //     } else {
        //         // تعديل الأقساط بناءً على النسب الأصلية
        //         installmentInputs.each(function (index) {
        //             let originalValue = installmentsData[index].amountInstallment || 0;
        //             let newInstallmentValue = parseFloat(((originalValue / currentTotalInstallments) * total).toFixed(2));

        //             $(this).val(newInstallmentValue);
        //             installmentsData[index].amountInstallment = parseFloat(newInstallmentValue);
        //         });
        //     }

        //     // تحديث الحقول القابلة للقراءة فقط
        //     updateReadonlyInstallments();
        // }


        //                      function updateReadonlyInstallments() {
        //     let totalAfterDiscount = 0;

        //     $(".installmentAmountReadonly").each(function () {
        //         let id = $(this).data("id");
        //         let correspondingInput = $(`.installmentAmount[data-id='${id}']`);

        //         let value = parseFloat($(this).val()) || 0;

        //         // تحديث الحقول القابلة للقراءة
        //         if (correspondingInput.length > 0) {
        //             correspondingInput.val(value.toFixed(2));
        //         }

        //         // تحديث بيانات القسط في المصفوفة
        //         let installment = installmentsData.find(i => i.id == id);
        //         if (installment) {
        //             installment.amountInstallment = value;
        //         }

        //         totalAfterDiscount += value;
        //     });

        //     $("#discountedTotalAmount").val(totalAfterDiscount.toFixed(2));
        // }








            $(".discount-input").on("input", function () {
                let value = parseFloat($(this).val()) || 0;
                if (value < 0) {
                    $(this).val(0);
                    Swal.fire("خطأ", "لا يمكن إدخال خصم سلبي!", "error");
                }
                applyDiscounts();
            });

            function displayInstallments(container, data, amount, readonly) {
                let html = "";
                if(readonly){
                     if (data.length === 1) {
                    html = `
                        <div class="col">
                            <label class="form-label">المبلغ الإجمالي</label>
                            <input  type="number" asp-for="TotalCostAfterDiscount" id="discountedTotalAmount" class="form-control form-control-sm" value="${amount.toFixed(2)}" readonly>
                        </div>`;
                } else {
                    data.forEach(item => {
                        html += `
                            <div class="col">
                                <label class="form-label">${item.installName}</label>
                                <input type="number" class="form-control form-control-sm installmentAmountReadonly "
                                       value="${(amount / data.length).toFixed(2)}"
                                       data-id="${item.id}" readonly>
                            </div>`;
                    });
                }
                }else{
                     if (data.length === 1) {
                    html = `
                        <div class="col">
                            <label class="form-label">المبلغ الإجمالي</label>
                            <input readonly asp-for="TotalCost" type="number" class="form-control form-control-sm" value="${amount.toFixed(2)}" >
                        </div>`;
                } else {
                    data.forEach(item => {
                        html += `
                            <div class="col">
                                <label class="form-label">${item.installName}</label>
                                <input type="number" class="form-control form-control-sm installmentAmount"
                                       value="${(amount / data.length).toFixed(2)}"
                                       data-id="${item.id}" >
                            </div>`;
                    });
                }
                }
               

                $(container).html(html);
            }

        function adjustInstallments(changedInput) {
            let newValue = parseFloat(changedInput.val()) || 0;
            let id = changedInput.data("id");
            let otherInputs = $(".installmentAmount").not(`[data-id='${id}']`);

            // إجمالي المبلغ بعد الخصم
            let totalAfterDiscount = parseFloat($("#discountedTotalAmount").val()) || baseTotalAmount;

            let remainingSum = totalAfterDiscount - newValue;
            let newAmountPerInput = (remainingSum / otherInputs.length).toFixed(2);

            if (newAmountPerInput < 0) {
                Swal.fire("تنبيه", "القيمة المدخلة أكبر من المبلغ الإجمالي بعد الخصم!", "warning");
                changedInput.val((totalAfterDiscount / $(".installmentAmount").length).toFixed(2));
                return;
            }

            // توزيع القيم على باقي الأقساط
            otherInputs.each(function () {
                $(this).val(newAmountPerInput);
            });

            // تحديث القيم داخل installmentsContainerAfterDiscount
            updateReadonlyInstallments();
        }


                      function updateReadonlyInstallments() {
            let totalAfterDiscount = 0;

            $(".installmentAmountReadonly").each(function () {
                let id = $(this).data("id");
                let correspondingInput = $(`.installmentAmount[data-id='${id}']`);
                let value = parseFloat(correspondingInput.val()) || 0;

                $(this).val(value.toFixed(2));

                let installment = installmentsData.find(i => i.id == id);
                if (installment) {
                    installment.amountInstallment = value;
                }

                totalAfterDiscount += value;
            });

            $("#discountedTotalAmount").val(totalAfterDiscount.toFixed(2));
        }




            function updateTotalWithExtras() {
                let extraAmount = 0;

                $(".additional-input").each(function () {
                    let inputValue = parseFloat($(this).attr("data-value")) || 0;
                    let isChecked = $(this).closest(".d-flex").find(".additional-checkbox").prop("checked");

                    if (isChecked) {
                        extraAmount += inputValue;
                    }
                });

                let finalAmount = baseTotalAmount + extraAmount;
                $("#installmentsContainerAfterDiscount").attr("data-total", finalAmount);
                $("#discountedTotalAmount").val(finalAmount.toFixed(2));
            }
        });

    </script>

    <script>

                     $(document).ready(function () {
            $(".additional-checkbox").change(function () {
                let container = $("#container");
                let parentDiv = $(this).closest(".d-flex");
                let labelText = parentDiv.find("label").text().trim();
                let inputValue = parentDiv.find(".additional-input").val() || "0";
                let inputId = parentDiv.find(".additional-input").attr("id");

                if ($(this).prop("checked")) {
                    // ✅ إضافة العنصر إلى #container فقط إذا لم يكن مضافًا بالفعل
                    if (container.find(`.added-item[data-id="${inputId}"]`).length === 0) {
                        container.append(`
                            <div class="col added-item" data-id="${inputId}">
                                <label class="form-label">${labelText}</label>
                                <input type="number" class="form-control form-control-sm" value="${inputValue}" readonly>
                            </div>
                        `);
                    }
                } else {
                    // ❌ حذف العنصر إذا تم إلغاء تحديد الـ checkbox
                    container.find(`.added-item[data-id="${inputId}"]`).remove();
                }
            });

            // ✅ تحديث قيمة الإدخال داخل #container عند التغيير
            $(".additional-input").on("input", function () {
                let inputId = $(this).attr("id");
                let newValue = $(this).val() || "0";

                // ✅ تحديث قيمة الـ input المرتبط داخل #container إذا كان موجودًا
                let inputField = $(`.added-item[data-id="${inputId}"] input`);
                if (inputField.length > 0) {
                    inputField.val(newValue);
                }
            });
        });

        $(document).ready(function () {
            // تأكد من تهيئة jQuery Validation
              var form = $("#StudentForm");
               $("#StudentForm").validate();
            $("#btnAdd").click(function (e) {
               

                e.preventDefault(); // منع إعادة تحميل الصفحة

                var form = $("#StudentForm");

                // 🔹 تحقق مما إذا كان النموذج صالحًا
                if (!form.valid()) {
                    return; // لا يتم إرسال الطلب إذا كان هناك أخطاء
                }

                       function getInstallmentData() {
            let installments = [];
            document.querySelectorAll("#installmentsContainer .installmentAmount").forEach(input => {
                let installment = {
                    Id: 0,
                    InstallmentId: parseInt(input.dataset.id),
                    CostInstallment: parseFloat(input.value),
                    InstallmentName: input.previousElementSibling.textContent.trim() // Get the label text
                };
                installments.push(installment);
            });
            return installments;
        }


                function getInstallmentDataAfterDiscount() {
                    let installments = [];
                    document.querySelectorAll("#installmentsContainerAfterDiscount .installmentAmountReadonly").forEach(input => {
                        let installment = {
                            Id: 0,
                            InstallmentId: parseInt(input.dataset.id),
                            CostInstallment: parseFloat(input.value),
                    InstallmentName: input.previousElementSibling.textContent.trim()
                        };
                        installments.push(installment);
                    });
                    return installments;
                }

                // إنشاء كائن FormData لتخزين البيانات
                var formData = new FormData($("#StudentForm")[0]);

                // 🔹 إضافة البيانات بناءً على الـ checkboxes المحددة
                let checkboxes = [
                    { id: "checkCLSCloth", inputId: "CLSCloth" },
                    { id: "checkCLSAcpt", inputId: "CLSAcpt" },
                    { id: "checkCLSBakelite", inputId: "CLSBakelite" }
                ];

                checkboxes.forEach(item => {
                    let checkbox = document.getElementById(item.id);
                    if (checkbox && checkbox.checked) {
                        let inputValue = document.getElementById(item.inputId).value;
                        formData.append(item.inputId, inputValue);
                    }
                });
                let installments = getInstallmentData();
                let installmentsAfterDiscount = getInstallmentDataAfterDiscount();
                                installments.forEach((item, index) => {
            formData.append(`installmentCostBeforeDiscounts[${index}].Id`, item.Id);
            formData.append(`installmentCostBeforeDiscounts[${index}].InstallmentId`, item.InstallmentId);
            formData.append(`installmentCostBeforeDiscounts[${index}].CostInstallment`, item.CostInstallment);
            formData.append(`installmentCostBeforeDiscounts[${index}].InstallmentName`, item.InstallmentName);
        });


        // Add installmentCostAfterDiscounts
        installmentsAfterDiscount.forEach((item, index) => {
            formData.append(`installmentCostAfterDiscounts[${index}].Id`, item.Id);
            formData.append(`installmentCostAfterDiscounts[${index}].InstallmentId`, item.InstallmentId);
            formData.append(`installmentCostAfterDiscounts[${index}].CostInstallment`, item.CostInstallment);
            formData.append(`installmentCostAfterDiscounts[${index}].InstallmentName`, item.InstallmentName);
        });
                // إضافة بيانات الأقساط
                
               
                // إرسال البيانات عبر AJAX
                $.ajax({
                    url: '@Url.Action("Add", "Student")',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        if (response.success) {
                            Swal.fire("نجاح", response.message, "success").then(function () {
                                location.reload();
                            });
                        } else {
                            Swal.fire("خطأ", response.message, "error");
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        var errMsg = jqXHR.responseJSON ? jqXHR.responseJSON.join("<br/>") : errorThrown;
                        Swal.fire("خطأ", errMsg, "error");
                    }
                });
            });
        });
                $(document).ready(function () {
            // إضافة رسوم التسجيل تلقائيًا عند تحميل الصفحة
            addFixedFee("رسوم التسجيل", $("#CLSRegs").val());

            // عند تغيير قيمة رسوم التسجيل، يتم تحديثها داخل الحاوية
            $("#CLSRegs").on("input", function () {
                $("#container .cls-regs-value").val($(this).val());
            });

            function addFixedFee(label, value) {
                $("#container").append(`
                    <div class="col">
                        <label class="form-label">${label}</label>
                        <input type="number" id='cLSRegs' class="form-control form-control-sm cls-regs-value" value="${value}" readonly>
                    </div>
                `);
            }
        });

                $(document).ready(function () {
                     $.ajax({
                url: '@Url.Action("GetNextCode", "Student")',
                type: 'GET',
                dataType: 'json',
                success: function (response) {
                    $('#studentCodeInput').val(response.nextCode);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.error("Error retrieving the next code:", errorThrown);
                }
            });
                                    async function fetchBusCost() {
            var busCostTypeId = parseInt($("#busCostTypeId").val());
            var buseId = parseInt($("#buscostId").val());

            if (buseId === 0 || busCostTypeId === 0) {
                Swal.fire("تنبيه", "يرجى اختيار الباص واتجاه خط سير الباص", "warning");
                return;
            }

            try {
                const response = await $.ajax({
                    type: "GET",
                    url: '@Url.Action("GetBusCostByClassType", "Student")',
                    data: { buseId: buseId, busCostTypeId: busCostTypeId },
                    dataType: "json"
                });

                console.log(response);
                $("#costFirstTrem").val(response.fristTremCost);
        $("#costFirstTremAfterChooseBus").val(response.fristTremCost);
                $("#costSecondTrem").val(response.secondTremCost);
                $("#costSecondTremAfterChooseBus").val(response.secondTremCost);
                $("#busDiscount").val(0);
            } catch (error) {
                console.error("Error fetching installments:", error);
                Swal.fire("خطأ", "حدث خطأ أثناء جلب البيانات", "error");
            }
        }
            $("#buscostId").change(async function () {
            await fetchBusCost();
        });
                   $("#busCostTypeId").change(async function () {
            await fetchBusCostByType();
        });
          async function fetchBusCostByType() {
            var busCostTypeId = parseInt($("#busCostTypeId").val());
            var buseId = parseInt($("#buscostId").val());
            if (buseId === 0 || busCostTypeId === 0) {
               
                return;
            }

           

            try {
                const response = await $.ajax({
                    type: "GET",
                    url: '@Url.Action("GetBusCostByClassType", "Student")',
                    data: { buseId: buseId, busCostTypeId: busCostTypeId },
                    dataType: "json"
                });

                console.log(response);
                $("#costFirstTrem").val(response.fristTremCost);
        $("#costFirstTremAfterChooseBus").val(response.fristTremCost);
                $("#costSecondTrem").val(response.secondTremCost);
                $("#costSecondTremAfterChooseBus").val(response.secondTremCost);
                $("#busDiscount").val(0);
            } catch (error) {
                console.error("Error fetching installments:", error);
                Swal.fire("خطأ", "حدث خطأ أثناء جلب البيانات", "error");
            }
        }

                    // On page load, get the next available code from the server
                                                         async function loadClassTypesByStage(stageId) {
                    var classTypeDropdown = $("#classTypeId");
                    classTypeDropdown.empty(); // تفريغ القائمة
                    classTypeDropdown.append('<option value="0">اختر الفصل</option>'); // إعادة الخيار الافتراضي

                    if (stageId == 0) return; // لا تقم بإرسال الطلب إذا لم يكن هناك مرحلة صالحة

                    try {
                        const data = await $.ajax({
                            url: '@Url.Action("GetClassTypeNamesByStage", "ClassType")',
                            type: 'GET',
                            data: { stageId: stageId },
                            dataType: 'json'
                        });

                        if (data && data.length > 0) {
                            $.each(data, function (i, item) {
                                classTypeDropdown.append('<option value="' + item.id + '">' + item.name + '</option>');
                            });
                        } else {
                            classTypeDropdown.append('<option value="0">لا توجد بيانات</option>');
                        }
                    } catch (error) {
                        Swal.fire("خطأ", "حدث خطأ أثناء جلب البيانات", "error");
                    }
                }

                // استدعاء الدالة عند تغيير المرحلة الدراسية
                $("#StageId").change(function () {
                    var stageId = $(this).val();
                    loadClassTypesByStage(stageId);
                });

                    // $.ajax({
                    //     url: '@Url.Action("GetNextCode", "Installment")',
                    //     type: 'GET',
                    //     dataType: 'json',
                    //     success: function (response) {
                    //         $('#installmentCodeInput').val(response.nextCode);
                    //     },
                    //     error: function (jqXHR, textStatus, errorThrown) {
                    //         console.error("Error retrieving the next code:", errorThrown);
                    //     }
                    // });
                            $("#btnDelete").click(function () {
                    // Get the record's ID from a hidden field or another element
                    var id = $("#studentId").val();


                    // Show confirmation dialog
                    Swal.fire({
                        title: 'هل أنت متأكد؟',
                        text: "لن تتمكن من التراجع عن هذا الإجراء!",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'نعم، احذفها!',
                        cancelButtonText: 'إلغاء'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // If confirmed, send the delete request
                            $.ajax({
                                url: '@Url.Action("Delete", "Student")',
                                type: 'POST',
                                data: { id: id },
                                success: function (response) {
                                    // Assuming your API returns a success message (you can modify as needed)
                                    Swal.fire("تم الحذف!", response.success, "success").then(function () {
                                        location.reload();
                                    });
                                },
                                error: function (jqXHR, textStatus, errorThrown) {
                                    Swal.fire("خطأ", "Error deleting data: " + errorThrown, "error");
                                }
                            });
                        }
                    });
                });

                    // Handler for the Add button
                                       var form = $("#StudentForm");




                   // Handler for the Edit button
        $("#btnEdit").click(function (e) {
            $("#StudentForm").validate();
              e.preventDefault(); // منع إعادة تحميل الصفحة

              
                // 🔹 تحقق مما إذا كان النموذج صالحًا
                if (!form.valid()) {
                    return; // لا يتم إرسال الطلب إذا كان هناك أخطاء
                }

                       function getInstallmentData() {
            let installments = [];
            document.querySelectorAll("#installmentsContainer .installmentAmount").forEach(input => {
                let installment = {
                    Id: 0,
                    InstallmentId: parseInt(input.dataset.id),
                    CostInstallment: parseFloat(input.value),
                    InstallmentName: input.previousElementSibling.textContent.trim() // Get the label text
                };
                installments.push(installment);
            });
            return installments;
        }


                function getInstallmentDataAfterDiscount() {
                    let installments = [];
                    document.querySelectorAll("#installmentsContainerAfterDiscount .installmentAmountReadonly").forEach(input => {
                        let installment = {
                            Id: 0,
                            InstallmentId: parseInt(input.dataset.id),
                            CostInstallment: parseFloat(input.value),
                    InstallmentName: input.previousElementSibling.textContent.trim()
                        };
                        installments.push(installment);
                    });
                    return installments;
                }

                // إنشاء كائن FormData لتخزين البيانات
                var formData = new FormData($("#StudentForm")[0]);

                // 🔹 إضافة البيانات بناءً على الـ checkboxes المحددة
                let checkboxes = [
                    { id: "checkCLSCloth", inputId: "CLSCloth" },
                    { id: "checkCLSAcpt", inputId: "CLSAcpt" },
                    { id: "checkCLSBakelite", inputId: "CLSBakelite" }
                ];

                checkboxes.forEach(item => {
                    let checkbox = document.getElementById(item.id);
                    if (checkbox && checkbox.checked) {
                        let inputValue = document.getElementById(item.inputId).value;
                        formData.append(item.inputId, inputValue);
                    }
                });
                let installments = getInstallmentData();
                let installmentsAfterDiscount = getInstallmentDataAfterDiscount();
                                installments.forEach((item, index) => {
            formData.append(`installmentCostBeforeDiscounts[${index}].Id`, item.Id);
            formData.append(`installmentCostBeforeDiscounts[${index}].InstallmentId`, item.InstallmentId);
            formData.append(`installmentCostBeforeDiscounts[${index}].CostInstallment`, item.CostInstallment);
            formData.append(`installmentCostBeforeDiscounts[${index}].InstallmentName`, item.InstallmentName);
        });


        // Add installmentCostAfterDiscounts
        installmentsAfterDiscount.forEach((item, index) => {
            formData.append(`installmentCostAfterDiscounts[${index}].Id`, item.Id);
            formData.append(`installmentCostAfterDiscounts[${index}].InstallmentId`, item.InstallmentId);
            formData.append(`installmentCostAfterDiscounts[${index}].CostInstallment`, item.CostInstallment);
            formData.append(`installmentCostAfterDiscounts[${index}].InstallmentName`, item.InstallmentName);
        });
            // AJAX call for EditInstallment
            $.ajax({
                url: '@Url.Action("Edit", "Student")',
               type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                          if (response.success) {
                        Swal.fire('نجاح', response.message, 'success').then(function () {
                            location.reload();
                        });
                    } else {
                        Swal.fire('خطأ', response.message, 'error');
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    var errors = "";
                    var responseErrors = jqXHR.responseJSON;
                    if (responseErrors) {
                        $.each(responseErrors, function (key, value) {
                            errors += value.join("<br/>") + "<br/>";
                        });
                    } else {
                        errors = errorThrown;
                    }
                    Swal.fire('خطأ', errors, 'error');
                }
            });
        });
         function displayInstallmentsWhenSlectdata(container, data, amount, readonly) {
                let html = "";
                if(readonly){
                     if (data.length === 1) {
                    html = `
                        <div class="col">
                            <label class="form-label">المبلغ الإجمالي</label>
                            <input  type="number" asp-for="TotalCostAfterDiscount" id="discountedTotalAmount" class="form-control form-control-sm" value="${amount.toFixed(2)}" readonly>
                        </div>`;
                } else {
                    data.forEach(item => {
                        html += `
                            <div class="col">
                                <label class="form-label">${item.installmentName}</label>
                                <input type="number" class="form-control form-control-sm installmentAmountReadonly "
                                       value="${(item.costInstallment).toFixed(2)}"
                                       data-id="${item.id}" data-installmentId="${item.installmentId}" readonly>
                            </div>`;
                    });
                }
                }else{
                     if (data.length === 1) {
                    html = `
                        <div class="col">
                            <label class="form-label">المبلغ الإجمالي</label>
                            <input readonly asp-for="TotalCost" type="number" class="form-control form-control-sm" value="${amount.toFixed(2)}" >
                        </div>`;
                } else {
                    data.forEach(item => {
                        html += `
                            <div class="col">
                                <label class="form-label">${item.installmentName}</label>
                                <input type="number" class="form-control form-control-sm installmentAmount"
                                       value="${(item.costInstallment).toFixed(2)}"
                                       data-id="${item.id}"
                                       data-installmentId="${item.installmentId}">
                            </div>`;
                    });
                }
                }


                $(container).html(html);
            }

                    // Handler for the Min button (gets record with minimum code)
                    $("#btnMin").click(async function () {


                        try {
                            const response = await $.ajax({
                                type: "GET",
                                url: '@Url.Action("GetMinStudent", "Student")',
                                dataType: "json"
                            });
                            if (response) {
                                console.log(response)
                               // إزالة التحقق من النموذج
            let validator = $("#StudentForm").validate();
            validator.resetForm(); // إزالة الأخطاء الظاهرة
            $("#StudentForm")[0].reset(); // إعادة تعيين القيم الافتراضية
            $(".error").removeClass("error"); // إزالة تنسيقات الأخطاء

            // إزالة رسائل الخطأ يدويًا
            $(".text-danger").text("");
            $(".field-validation-error").removeClass("field-validation-error").addClass("field-validation-valid");

                               $("#studentId").val(response.id);
                               $("#studentCodeInput").val(response.studentNumber);
                               $("#departmentId").val(response.departmentId);
                               $("#StageId").val(response.stageId);
                               $("#studentName").val(response.studentName);
                               $("#fatherName").val(response.fatherName);
                               $("#grandFatherName").val(response.grandFatherName);
                               $("#familyName").val(response.familyName);
                               $("#brithDate").val(response.brithDate);
                               $("#brithPlace").val(response.brithPlace);
                               $("#nationalId").val(response.nationalId);
                               let genderValue = response.ganderType; // Ensure the key matches the returned data

                                      // Set the correct radio button as checked
                                      $(`input[name="GanderType"][value="${genderValue}"]`).prop("checked", true);

                               $("#classTypeId").val(response.classTypeId);
                               $("#classTypeName").val(response.classTypeName);
                               $("#lastBalance").val(response.lastBalance);
                               $("#lastSchoolName").val(response.lastSchoolName);
                               $("#advanceRepayment").val(response.advanceRepayment);
                               $("#monthlyInstallment").val(response.monthlyInstallment);
                               $("#personalStatusStudentId").val(response.personalStatusStudentId);
                               $("#personalStatusStudentNumber").val(response.personalStatusStudentNumber);
                               $("#personalStatusStudentStartDate").val(response.personalStatusStudentStartDate);
                               $("#personalStatusStudentPlace").val(response.personalStatusStudentPlace);
                               $("#personalStatusStudentEndDate").val(response.personalStatusStudentEndDate);
                                let paymentTypeId = response.paymentTypeId; // Ensure the key matches the returned data
                               $(`input[name="PaymentTypeId"][value="${paymentTypeId}"]`).prop("checked", true);
                               let enrollmentPeriodId = response.enrollmentPeriodId; // Ensure the key matches the returned data
                               $(`input[name="EnrollmentPeriodId"][value="${enrollmentPeriodId}"]`).prop("checked", true);

                               $("#guardianName").val(response.guardianName);
                               $("#kinship").val(response.kinship);
                               $("#guardianNationalId").val(response.guardianNationalId);
                               $("#guardianSideWork").val(response.guardianSideWork);
                               $("#guardianJob").val(response.guardianJob);
                               $("#guardianMobile").val(response.guardianMobile);
                               $("#guardianEmail").val(response.guardianEmail);
                               $("#guardianZipCode").val(response.guardianZipCode);
                               $("#guardianWorkMobile").val(response.guardianWorkMobile);
                               $("#nameOfClosestPerson").val(response.nameOfClosestPerson);
                               $("#houseLocationGuardian").val(response.houseLocationGuardian);
                               $("#houseMobileGuardian").val(response.houseMobileGuardian);
                               $("#guardianFaxNumber").val(response.guardianFaxNumber);
                                 let guardianWorkingWithUs = response.guardianWorkingWithUs; // Ensure the key matches the returned data
                               $(`input[name="GuardianWorkingWithUs"][value="${guardianWorkingWithUs}"]`).prop("checked", true);
                               loadClassTypesByStage(response.stageId);
                               $("#personalStatusGuardianId").val(response.personalStatusGuardianId);
                               $("#personalStatusGuardianNumber").val(response.personalStatusGuardianNumber);
                               $("#personalStatusGuardianStartDate").val(response.personalStatusGuardianStartDate);
                               $("#personalStatusGuardianPlace").val(response.personalStatusGuardianPlace);
                               $("#personalStatusGuardianEndDate").val(response.personalStatusGuardianEndDate);
                               $("#motherStudentName").val(response.motherStudentName);
                               $("#kinshipMother").val(response.kinshipMother);
                               $("#motherNationalId").val(response.motherNationalId);
                               $("#motherWork").val(response.motherWork);
                               $("#motherFaxNumber").val(response.motherFaxNumber);
                               $("#motherWorkMobile").val(response.motherWorkMobile);
                               $("#motherJob").val(response.motherJob);
                               $("#motherMobilePhone").val(response.motherMobilePhone);
                               $("#notes").val(response.notes);
                                displayInstallmentsWhenSlectdata("#installmentsContainer", response.installmentCostBeforeDiscounts, response.totalCost, false);
                    displayInstallmentsWhenSlectdata("#installmentsContainerAfterDiscount",  response.installmentCostAfterDiscounts, response.totalCostAfterDiscount, true);

                               $("#CLSCloth").val(response.clsCloth);
                               $("#CLSAcpt").val(response.clsAcpt);
                               $("#CLSBakelite").val(response.clsBakelite);
                               $("#CLSRegs").val(response.clsRegs);
                               $("#cLSRegs").val(response.clsRegs);
                               $("#showDivBus").val(response.areYouWantGoWithBusSchool);
                               $("#busCostTypeId").val(response.directionBus);
                               $("#buscostId").val(response.busId);
                               $("#costFirstTrem").val(response.costFirstTermBeforeDiscount);
                               $("#costSecondTrem").val(response.costSecondTermBeforeDiscount);
                               $("#costFirstTremAfterChooseBus").val(response.costFirstTermAfterDiscount);
                               $("#costSecondTremAfterChooseBus").val(response.costSecondTermAfterDiscount);
                               $("#generalDiscount").val(response.generalDiscount);
                               $("#employeeDiscount").val(response.employeeDiscount);
                               $("#earlyPaymentDiscount").val(response.earlyPaymentDiscount);
                               $("#siblingsDiscount").val(response.siblingsDiscount);
                               $("#communityFundDiscount").val(response.communityFundDiscount);
                               $("#specialDiscount").val(response.specialDiscount);
                               $("#fixedDiscount").val(response.totalDiscount);
                               $("#busDiscount").val(response.busDiscount);
                                let container = $("#container");
                                      if ( response.clsCloth !== 0) {
            $("#checkCLSCloth").prop("checked", true);

             container.append(`
                            <div class="col added-item" data-id="CLSCloth">
                                <label class="form-label">ايراد الزي</label>
                                <input type="number" class="form-control form-control-sm" value="${ response.clsCloth}" readonly>
                            </div>
                        `);
        }
             if ( response.clsBakelite !== 0) {
            $("#checkCLSBakelite").prop("checked", true);

             container.append(`
                            <div class="col added-item" data-id="CLSBakelite">
                                <label class="form-label">الباكليت </label>
                                <input type="number" class="form-control form-control-sm" value="${ response.clsBakelite}" readonly>
                            </div>
                        `);
        } if ( response.clsAcpt !== 0) {
            $("#checkCLSAcpt").prop("checked", true);

             container.append(`
                            <div class="col added-item" data-id="CLSAcpt">
                                <label class="form-label">ايراد الكتب</label>
                                <input type="number" class="form-control form-control-sm" value="${ response.clsAcpt}" readonly>
                            </div>
                        `);
        }


                                                   // انتظر حتى يتم تحميل قائمة الفصول
                           

                            // تأكد من تعيين الفئة بعد تحميل القائمة
                            $("#ClassTypeId").val(parseInt(response.classTypeId));
                            } else {
                                Swal.fire("خطأ", "No records found.", "error");
                            }
                        } catch (error) {
                            console.error("Error fetching min Installment:", error);
                            Swal.fire("خطأ", "Error fetching data.", "error");
                        }
                    });

                    // Handler for the Max button (gets record with maximum code)
                    $("#btnMax").click(async function () {
                        try {
                            const response = await $.ajax({
                                type: "GET",
                                url: '@Url.Action("GetMaxStudent", "Student")',
                                dataType: "json"
                            });
                           if (response) {
                                console.log(response)
                                let validator = $("#StudentForm").validate();
            validator.resetForm(); // إزالة الأخطاء الظاهرة
            $("#StudentForm")[0].reset(); // إعادة تعيين القيم الافتراضية
            $(".error").removeClass("error"); // إزالة تنسيقات الأخطاء

            // إزالة رسائل الخطأ يدويًا
            $(".text-danger").text("");
            $(".field-validation-error").removeClass("field-validation-error").addClass("field-validation-valid");


                               $("#studentId").val(response.id);
                               $("#studentCodeInput").val(response.studentNumber);
                               $("#departmentId").val(response.departmentId);
                               $("#StageId").val(response.stageId);
                               $("#studentName").val(response.studentName);
                               $("#fatherName").val(response.fatherName);
                               $("#grandFatherName").val(response.grandFatherName);
                               $("#familyName").val(response.familyName);
                               $("#brithDate").val(response.brithDate);
                               $("#brithPlace").val(response.brithPlace);
                               $("#nationalId").val(response.nationalId);
                               let genderValue = response.ganderType; // Ensure the key matches the returned data

                                      // Set the correct radio button as checked
                                      $(`input[name="GanderType"][value="${genderValue}"]`).prop("checked", true);

                               $("#classTypeId").val(response.classTypeId);
                               $("#classTypeName").val(response.classTypeName);
                               $("#lastBalance").val(response.lastBalance);
                               $("#lastSchoolName").val(response.lastSchoolName);
                               $("#advanceRepayment").val(response.advanceRepayment);
                               $("#monthlyInstallment").val(response.monthlyInstallment);
                               $("#personalStatusStudentId").val(response.personalStatusStudentId);
                               $("#personalStatusStudentNumber").val(response.personalStatusStudentNumber);
                               $("#personalStatusStudentStartDate").val(response.personalStatusStudentStartDate);
                               $("#personalStatusStudentPlace").val(response.personalStatusStudentPlace);
                               $("#personalStatusStudentEndDate").val(response.personalStatusStudentEndDate);
                                let paymentTypeId = response.paymentTypeId; // Ensure the key matches the returned data
                               $(`input[name="PaymentTypeId"][value="${paymentTypeId}"]`).prop("checked", true);
                               let enrollmentPeriodId = response.enrollmentPeriodId; // Ensure the key matches the returned data
                               $(`input[name="EnrollmentPeriodId"][value="${enrollmentPeriodId}"]`).prop("checked", true);

                               $("#guardianName").val(response.guardianName);
                               $("#kinship").val(response.kinship);
                               $("#guardianNationalId").val(response.guardianNationalId);
                               $("#guardianSideWork").val(response.guardianSideWork);
                               $("#guardianJob").val(response.guardianJob);
                               $("#guardianMobile").val(response.guardianMobile);
                               $("#guardianEmail").val(response.guardianEmail);
                               $("#guardianZipCode").val(response.guardianZipCode);
                               $("#guardianWorkMobile").val(response.guardianWorkMobile);
                               $("#nameOfClosestPerson").val(response.nameOfClosestPerson);
                               $("#houseLocationGuardian").val(response.houseLocationGuardian);
                               $("#houseMobileGuardian").val(response.houseMobileGuardian);
                               $("#guardianFaxNumber").val(response.guardianFaxNumber);
                                 let guardianWorkingWithUs = response.guardianWorkingWithUs; // Ensure the key matches the returned data
                               $(`input[name="GuardianWorkingWithUs"][value="${guardianWorkingWithUs}"]`).prop("checked", true);
                               loadClassTypesByStage(response.stageId);
                               $("#personalStatusGuardianId").val(response.personalStatusGuardianId);
                               $("#personalStatusGuardianNumber").val(response.personalStatusGuardianNumber);
                               $("#personalStatusGuardianStartDate").val(response.personalStatusGuardianStartDate);
                               $("#personalStatusGuardianPlace").val(response.personalStatusGuardianPlace);
                               $("#personalStatusGuardianEndDate").val(response.personalStatusGuardianEndDate);
                               $("#motherStudentName").val(response.motherStudentName);
                               $("#kinshipMother").val(response.kinshipMother);
                               $("#motherNationalId").val(response.motherNationalId);
                               $("#motherWork").val(response.motherWork);
                               $("#motherFaxNumber").val(response.motherFaxNumber);
                               $("#motherWorkMobile").val(response.motherWorkMobile);
                               $("#motherJob").val(response.motherJob);
                               $("#motherMobilePhone").val(response.motherMobilePhone);
                               $("#notes").val(response.notes);
                                displayInstallmentsWhenSlectdata("#installmentsContainer", response.installmentCostBeforeDiscounts, response.totalCost, false);
                    displayInstallmentsWhenSlectdata("#installmentsContainerAfterDiscount",  response.installmentCostAfterDiscounts, response.totalCostAfterDiscount, true);

                               $("#CLSCloth").val(response.clsCloth);
                               $("#CLSAcpt").val(response.clsAcpt);
                               $("#CLSBakelite").val(response.clsBakelite);
                               $("#CLSRegs").val(response.clsRegs);
                               $("#cLSRegs").val(response.clsRegs);
                               $("#showDivBus").val(response.areYouWantGoWithBusSchool);
                               $("#busCostTypeId").val(response.directionBus);
                               $("#buscostId").val(response.busId);
                               $("#costFirstTrem").val(response.costFirstTermBeforeDiscount);
                               $("#costSecondTrem").val(response.costSecondTermBeforeDiscount);
                               $("#costFirstTremAfterChooseBus").val(response.costFirstTermAfterDiscount);
                               $("#costSecondTremAfterChooseBus").val(response.costSecondTermAfterDiscount);
                               $("#generalDiscount").val(response.generalDiscount);
                               $("#employeeDiscount").val(response.employeeDiscount);
                               $("#earlyPaymentDiscount").val(response.earlyPaymentDiscount);
                               $("#siblingsDiscount").val(response.siblingsDiscount);
                               $("#communityFundDiscount").val(response.communityFundDiscount);
                               $("#specialDiscount").val(response.specialDiscount);
                               $("#fixedDiscount").val(response.totalDiscount);
                               $("#busDiscount").val(response.busDiscount);
                            let container = $("#container");
                                      if ( response.clsCloth !== 0) {
            $("#checkCLSCloth").prop("checked", true);

             container.append(`
                            <div class="col added-item" data-id="CLSCloth">
                                <label class="form-label">ايراد الزي</label>
                                <input type="number" class="form-control form-control-sm" value="${ response.clsCloth}" readonly>
                            </div>
                        `);
        }
             if ( response.clsBakelite !== 0) {
            $("#checkCLSBakelite").prop("checked", true);

             container.append(`
                            <div class="col added-item" data-id="CLSBakelite">
                                <label class="form-label">الباكليت </label>
                                <input type="number" class="form-control form-control-sm" value="${ response.clsBakelite}" readonly>
                            </div>
                        `);
        } if ( response.clsAcpt !== 0) {
            $("#checkCLSAcpt").prop("checked", true);

             container.append(`
                            <div class="col added-item" data-id="CLSAcpt">
                                <label class="form-label">ايراد الكتب</label>
                                <input type="number" class="form-control form-control-sm" value="${ response.clsAcpt}" readonly>
                            </div>
                        `);
        }

                            // تأكد من تعيين الفئة بعد تحميل القائمة
                            $("#ClassTypeId").val(parseInt(response.classTypeId));
                            } else {
                                Swal.fire("خطأ", "No records found.", "error");
                            }
                        } catch (error) {
                            console.error("Error fetching max Installment:", error);
                            Swal.fire("خطأ", "Error fetching data.", "error");
                        }
                    });

                    // Handler for the Previous button
                    $("#btnPrevious").click(async function () {
                        const studentId =$("#studentId").val();
                        // console.log(installmentId);

                        // console.log(typeof(+installmentId));
                        // if (+installmentId!==0) {
                        //     Swal.fire("تنبيه", "Please select a record first.", "warning");
                        //     return;
                        // }
                        try {
                            const response = await $.ajax({
                                type: "GET",
                                url: '@Url.Action("GetPreviousStudent", "Student", new { id = "ID_PLACEHOLDER" })'.replace("ID_PLACEHOLDER", +studentId),
                                dataType: "json"
                            });
                           if (response) {
                                console.log(response)
                                 let validator = $("#StudentForm").validate();
            validator.resetForm(); // إزالة الأخطاء الظاهرة
            $("#StudentForm")[0].reset(); // إعادة تعيين القيم الافتراضية
            $(".error").removeClass("error"); // إزالة تنسيقات الأخطاء

            // إزالة رسائل الخطأ يدويًا
            $(".text-danger").text("");
            $(".field-validation-error").removeClass("field-validation-error").addClass("field-validation-valid");


                               $("#studentId").val(response.id);
                               $("#studentCodeInput").val(response.studentNumber);
                               $("#departmentId").val(response.departmentId);
                               $("#StageId").val(response.stageId);
                               $("#studentName").val(response.studentName);
                               $("#fatherName").val(response.fatherName);
                               $("#grandFatherName").val(response.grandFatherName);
                               $("#familyName").val(response.familyName);
                               $("#brithDate").val(response.brithDate);
                               $("#brithPlace").val(response.brithPlace);
                               $("#nationalId").val(response.nationalId);
                               let genderValue = response.ganderType; // Ensure the key matches the returned data

                                      // Set the correct radio button as checked
                                      $(`input[name="GanderType"][value="${genderValue}"]`).prop("checked", true);

                               $("#classTypeId").val(response.classTypeId);
                               $("#classTypeName").val(response.classTypeName);
                               $("#lastBalance").val(response.lastBalance);
                               $("#lastSchoolName").val(response.lastSchoolName);
                               $("#advanceRepayment").val(response.advanceRepayment);
                               $("#monthlyInstallment").val(response.monthlyInstallment);
                               $("#personalStatusStudentId").val(response.personalStatusStudentId);
                               $("#personalStatusStudentNumber").val(response.personalStatusStudentNumber);
                               $("#personalStatusStudentStartDate").val(response.personalStatusStudentStartDate);
                               $("#personalStatusStudentPlace").val(response.personalStatusStudentPlace);
                               $("#personalStatusStudentEndDate").val(response.personalStatusStudentEndDate);
                                let paymentTypeId = response.paymentTypeId; // Ensure the key matches the returned data
                               $(`input[name="PaymentTypeId"][value="${paymentTypeId}"]`).prop("checked", true);
                               let enrollmentPeriodId = response.enrollmentPeriodId; // Ensure the key matches the returned data
                               $(`input[name="EnrollmentPeriodId"][value="${enrollmentPeriodId}"]`).prop("checked", true);

                               $("#guardianName").val(response.guardianName);
                               $("#kinship").val(response.kinship);
                               $("#guardianNationalId").val(response.guardianNationalId);
                               $("#guardianSideWork").val(response.guardianSideWork);
                               $("#guardianJob").val(response.guardianJob);
                               $("#guardianMobile").val(response.guardianMobile);
                               $("#guardianEmail").val(response.guardianEmail);
                               $("#guardianZipCode").val(response.guardianZipCode);
                               $("#guardianWorkMobile").val(response.guardianWorkMobile);
                               $("#nameOfClosestPerson").val(response.nameOfClosestPerson);
                               $("#houseLocationGuardian").val(response.houseLocationGuardian);
                               $("#houseMobileGuardian").val(response.houseMobileGuardian);
                               $("#guardianFaxNumber").val(response.guardianFaxNumber);
                                 let guardianWorkingWithUs = response.guardianWorkingWithUs; // Ensure the key matches the returned data
                               $(`input[name="GuardianWorkingWithUs"][value="${guardianWorkingWithUs}"]`).prop("checked", true);
                               loadClassTypesByStage(response.stageId);
                               $("#personalStatusGuardianId").val(response.personalStatusGuardianId);
                               $("#personalStatusGuardianNumber").val(response.personalStatusGuardianNumber);
                               $("#personalStatusGuardianStartDate").val(response.personalStatusGuardianStartDate);
                               $("#personalStatusGuardianPlace").val(response.personalStatusGuardianPlace);
                               $("#personalStatusGuardianEndDate").val(response.personalStatusGuardianEndDate);
                               $("#motherStudentName").val(response.motherStudentName);
                               $("#kinshipMother").val(response.kinshipMother);
                               $("#motherNationalId").val(response.motherNationalId);
                               $("#motherWork").val(response.motherWork);
                               $("#motherFaxNumber").val(response.motherFaxNumber);
                               $("#motherWorkMobile").val(response.motherWorkMobile);
                               $("#motherJob").val(response.motherJob);
                               $("#motherMobilePhone").val(response.motherMobilePhone);
                               $("#notes").val(response.notes);
                                displayInstallmentsWhenSlectdata("#installmentsContainer", response.installmentCostBeforeDiscounts, response.totalCost, false);
                    displayInstallmentsWhenSlectdata("#installmentsContainerAfterDiscount",  response.installmentCostAfterDiscounts, response.totalCostAfterDiscount, true);

                               $("#CLSCloth").val(response.clsCloth);
                               $("#CLSAcpt").val(response.clsAcpt);
                               $("#CLSBakelite").val(response.clsBakelite);
                               $("#CLSRegs").val(response.clsRegs);
                               $("#cLSRegs").val(response.clsRegs);
                               $("#showDivBus").val(response.areYouWantGoWithBusSchool);
                               $("#busCostTypeId").val(response.directionBus);
                               $("#buscostId").val(response.busId);
                               $("#costFirstTrem").val(response.costFirstTermBeforeDiscount);
                               $("#costSecondTrem").val(response.costSecondTermBeforeDiscount);
                               $("#costFirstTremAfterChooseBus").val(response.costFirstTermAfterDiscount);
                               $("#costSecondTremAfterChooseBus").val(response.costSecondTermAfterDiscount);
                               $("#generalDiscount").val(response.generalDiscount);
                               $("#employeeDiscount").val(response.employeeDiscount);
                               $("#earlyPaymentDiscount").val(response.earlyPaymentDiscount);
                               $("#siblingsDiscount").val(response.siblingsDiscount);
                               $("#communityFundDiscount").val(response.communityFundDiscount);
                               $("#specialDiscount").val(response.specialDiscount);
                               $("#fixedDiscount").val(response.totalDiscount);
                               $("#busDiscount").val(response.busDiscount);
                                let container = $("#container");
                                      if ( response.clsCloth !== 0) {
            $("#checkCLSCloth").prop("checked", true);

             container.append(`
                            <div class="col added-item" data-id="CLSCloth">
                                <label class="form-label">ايراد الزي</label>
                                <input type="number" class="form-control form-control-sm" value="${ response.clsCloth}" readonly>
                            </div>
                        `);
        }
             if ( response.clsBakelite !== 0) {
            $("#checkCLSBakelite").prop("checked", true);

             container.append(`
                            <div class="col added-item" data-id="CLSBakelite">
                                <label class="form-label">الباكليت </label>
                                <input type="number" class="form-control form-control-sm" value="${ response.clsBakelite}" readonly>
                            </div>
                        `);
        } if ( response.clsAcpt !== 0) {
            $("#checkCLSAcpt").prop("checked", true);

             container.append(`
                            <div class="col added-item" data-id="CLSAcpt">
                                <label class="form-label">ايراد الكتب</label>
                                <input type="number" class="form-control form-control-sm" value="${ response.clsAcpt}" readonly>
                            </div>
                        `);
        }

                            // تأكد من تعيين الفئة بعد تحميل القائمة
                            $("#ClassTypeId").val(parseInt(response.classTypeId));
                            } else {
                                Swal.fire("خطأ", "No records found.", "error");
                            }
                        } catch (error) {
                             // If the status code is 404, display a specific warning message.
                if (error.status == 404) {
                    Swal.fire("تنبيه", "لا يوجد  ملف طالب قبل تلك", "info");
                } else {
                    console.error("Error fetching previous Installment:", error);
                    Swal.fire("خطأ", "Error fetching data.", "error");
                }
                        }
                    });

                    // Handler for the Next button
                    $("#btnNext").click(async function () {
                        const studentId =parseInt( $("#studentId").val());
                        // console.log(installmentId);
                        // console.log(typeof(installmentId));
                        // if (+installmentId!==0) {
                        //     Swal.fire("تنبيه", "Please select a record first.", "warning");
                        //     return;
                        // }
                        try {
                            const response = await $.ajax({
                                type: "GET",
                                url: '@Url.Action("GetNextStudent", "Student", new { id = "ID_PLACEHOLDER" })'.replace("ID_PLACEHOLDER", +studentId),
                                dataType: "json"
                            });
                          if (response) {
                                console.log(response)
                                 let validator = $("#StudentForm").validate();
            validator.resetForm(); // إزالة الأخطاء الظاهرة
            $("#StudentForm")[0].reset(); // إعادة تعيين القيم الافتراضية
            $(".error").removeClass("error"); // إزالة تنسيقات الأخطاء

            // إزالة رسائل الخطأ يدويًا
            $(".text-danger").text("");
            $(".field-validation-error").removeClass("field-validation-error").addClass("field-validation-valid");


                               $("#studentId").val(response.id);
                               $("#studentCodeInput").val(response.studentNumber);
                               $("#departmentId").val(response.departmentId);
                               $("#StageId").val(response.stageId);
                               $("#studentName").val(response.studentName);
                               $("#fatherName").val(response.fatherName);
                               $("#grandFatherName").val(response.grandFatherName);
                               $("#familyName").val(response.familyName);
                               $("#brithDate").val(response.brithDate);
                               $("#brithPlace").val(response.brithPlace);
                               $("#nationalId").val(response.nationalId);
                               let genderValue = response.ganderType; // Ensure the key matches the returned data

                                      // Set the correct radio button as checked
                                      $(`input[name="GanderType"][value="${genderValue}"]`).prop("checked", true);

                               $("#classTypeId").val(response.classTypeId);
                               $("#classTypeName").val(response.classTypeName);
                               $("#lastBalance").val(response.lastBalance);
                               $("#lastSchoolName").val(response.lastSchoolName);
                               $("#advanceRepayment").val(response.advanceRepayment);
                               $("#monthlyInstallment").val(response.monthlyInstallment);
                               $("#personalStatusStudentId").val(response.personalStatusStudentId);
                               $("#personalStatusStudentNumber").val(response.personalStatusStudentNumber);
                               $("#personalStatusStudentStartDate").val(response.personalStatusStudentStartDate);
                               $("#personalStatusStudentPlace").val(response.personalStatusStudentPlace);
                               $("#personalStatusStudentEndDate").val(response.personalStatusStudentEndDate);
                                let paymentTypeId = response.paymentTypeId; // Ensure the key matches the returned data
                               $(`input[name="PaymentTypeId"][value="${paymentTypeId}"]`).prop("checked", true);
                               let enrollmentPeriodId = response.enrollmentPeriodId; // Ensure the key matches the returned data
                               $(`input[name="EnrollmentPeriodId"][value="${enrollmentPeriodId}"]`).prop("checked", true);

                               $("#guardianName").val(response.guardianName);
                               $("#kinship").val(response.kinship);
                               $("#guardianNationalId").val(response.guardianNationalId);
                               $("#guardianSideWork").val(response.guardianSideWork);
                               $("#guardianJob").val(response.guardianJob);
                               $("#guardianMobile").val(response.guardianMobile);
                               $("#guardianEmail").val(response.guardianEmail);
                               $("#guardianZipCode").val(response.guardianZipCode);
                               $("#guardianWorkMobile").val(response.guardianWorkMobile);
                               $("#nameOfClosestPerson").val(response.nameOfClosestPerson);
                               $("#houseLocationGuardian").val(response.houseLocationGuardian);
                               $("#houseMobileGuardian").val(response.houseMobileGuardian);
                               $("#guardianFaxNumber").val(response.guardianFaxNumber);
                                 let guardianWorkingWithUs = response.guardianWorkingWithUs; // Ensure the key matches the returned data
                               $(`input[name="GuardianWorkingWithUs"][value="${guardianWorkingWithUs}"]`).prop("checked", true);
                               loadClassTypesByStage(response.stageId);
                               $("#personalStatusGuardianId").val(response.personalStatusGuardianId);
                               $("#personalStatusGuardianNumber").val(response.personalStatusGuardianNumber);
                               $("#personalStatusGuardianStartDate").val(response.personalStatusGuardianStartDate);
                               $("#personalStatusGuardianPlace").val(response.personalStatusGuardianPlace);
                               $("#personalStatusGuardianEndDate").val(response.personalStatusGuardianEndDate);
                               $("#motherStudentName").val(response.motherStudentName);
                               $("#kinshipMother").val(response.kinshipMother);
                               $("#motherNationalId").val(response.motherNationalId);
                               $("#motherWork").val(response.motherWork);
                               $("#motherFaxNumber").val(response.motherFaxNumber);
                               $("#motherWorkMobile").val(response.motherWorkMobile);
                               $("#motherJob").val(response.motherJob);
                               $("#motherMobilePhone").val(response.motherMobilePhone);
                               $("#notes").val(response.notes);
                                displayInstallmentsWhenSlectdata("#installmentsContainer", response.installmentCostBeforeDiscounts, response.totalCost, false);
                    displayInstallmentsWhenSlectdata("#installmentsContainerAfterDiscount",  response.installmentCostAfterDiscounts, response.totalCostAfterDiscount, true);

                               $("#CLSCloth").val(response.clsCloth);
                               $("#CLSAcpt").val(response.clsAcpt);
                               $("#CLSBakelite").val(response.clsBakelite);
                               $("#CLSRegs").val(response.clsRegs);
                               $("#cLSRegs").val(response.clsRegs);
                               $("#showDivBus").val(response.areYouWantGoWithBusSchool);
                               $("#busCostTypeId").val(response.directionBus);
                               $("#buscostId").val(response.busId);
                               $("#costFirstTrem").val(response.costFirstTermBeforeDiscount);
                               $("#costSecondTrem").val(response.costSecondTermBeforeDiscount);
                               $("#costFirstTremAfterChooseBus").val(response.costFirstTermAfterDiscount);
                               $("#costSecondTremAfterChooseBus").val(response.costSecondTermAfterDiscount);
                               $("#generalDiscount").val(response.generalDiscount);
                               $("#employeeDiscount").val(response.employeeDiscount);
                               $("#earlyPaymentDiscount").val(response.earlyPaymentDiscount);
                               $("#siblingsDiscount").val(response.siblingsDiscount);
                               $("#communityFundDiscount").val(response.communityFundDiscount);
                               $("#specialDiscount").val(response.specialDiscount);
                               $("#fixedDiscount").val(response.totalDiscount);
                               $("#busDiscount").val(response.busDiscount);
                              let container = $("#container");
                                      if ( response.clsCloth !== 0) {
            $("#checkCLSCloth").prop("checked", true);

             container.append(`
                            <div class="col added-item" data-id="CLSCloth">
                                <label class="form-label">ايراد الزي</label>
                                <input type="number" class="form-control form-control-sm" value="${ response.clsCloth}" readonly>
                            </div>
                        `);
        }
         if ( response.clsBakelite !== 0) {
            $("#checkCLSBakelite").prop("checked", true);

             container.append(`
                            <div class="col added-item" data-id="CLSBakelite">
                                <label class="form-label">الباكليت </label>
                                <input type="number" class="form-control form-control-sm" value="${ response.clsBakelite}" readonly>
                            </div>
                        `);
        } if ( response.clsAcpt !== 0) {
            $("#checkCLSAcpt").prop("checked", true);

             container.append(`
                            <div class="col added-item" data-id="CLSAcpt">
                                <label class="form-label">ايراد الكتب</label>
                                <input type="number" class="form-control form-control-sm" value="${ response.clsAcpt}" readonly>
                            </div>
                        `);
        }
                            // تأكد من تعيين الفئة بعد تحميل القائمة
                            $("#ClassTypeId").val(parseInt(response.classTypeId));
                            } else {
                                Swal.fire("خطأ", "No records found.", "error");
                            }
                        } catch (error) {
                            // If the status code is 404, display a specific warning message.
                if (error.status == 404) {
                    Swal.fire("تنبيه", "لا يوجد ملف طالب بعد تلك.", "info");
                } else {
                    console.error("Error fetching previous Installment:", error);
                    Swal.fire("خطأ", "Error fetching data.", "error");
                }
                        }
                    });
                });
    </script>
}