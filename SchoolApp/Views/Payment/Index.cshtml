@using SchoolApp.DAL.ViewModels
@model VWPayment
@using Microsoft.AspNetCore.Identity
@using SchoolApp.DAL.Models
@using SchoolApp.DAL.ViewModels
@inject UserManager<ApplicationUser> UserManager

@{
    var currentUser = await UserManager.GetUserAsync(User);
}

<style>
    /* تقليل حجم المدخلات */
    .custom-input {
        font-size: 0.85rem;
        padding: 0.25rem 0.5rem;
    }

    /* تقليل الهوامش بين الحقول */
    .custom-form-group {
        margin-bottom: 0.5rem;
    }

    /* تقليل الهوامش حول الأزرار */
    .custom-button {
        margin: 0.2rem;
        padding: 0.3rem 0.5rem;
    }

</style>
<div class="col-12 grid-margin stretch-card">
    <div class="card">
        <div class="d-flex justify-content-between">
            <div class="m-0">
                <h1 class="card-title text-dark font-weight-bold fs-2"> سندات قبض</h1>
            </div>
            @if (currentUser.Level == UserLevels.Admin || currentUser.Level == UserLevels.View || currentUser.Level == UserLevels.EditAdd)
            {
                <div class="d-flex justify-content-end navigation-buttons">
                    <div class="btn btn-primary btn-sm custom-button" id="btnMin">
                        <i class="fa fa-angle-double-right"></i>
                    </div>
                    <div class="btn btn-primary btn-sm custom-button" id="btnPrevious">
                        <i class="fa fa-angle-right"></i>
                    </div>
                    <div class="btn btn-primary btn-sm custom-button" id="btnNext">
                        <i class="fa fa-angle-left"></i>
                    </div>
                    <div class="btn btn-primary btn-sm custom-button" id="btnMax">
                        <i class="fa fa-angle-double-left"></i>
                    </div>
                </div>
            }
            else
            {
                <div class="d-flex justify-content-end navigation-buttons">
                </div>
            }

        </div>

        <div class="card-body">
            <form id="paymentForm" class="forms-sample">
                <!-- Static Fields -->
                <div class="errorContainer">
                </div>
                <input type="hidden" id="paymentId"  asp-for="Id"/>
                <div class="row custom-form-group">
                    <div class="col-md-6">
                        <label class="fs-6">رقم السند </label>
                        <input type="number" id="paymentCode" asp-for="Code" class="form-control form-control-sm ">
                    </div>
                    <div class="col-md-6">
                        <label class="fs-6"> تاريخ اليوم</label>
                        <input readonly type="date" id="paymentDate" asp-for="PaymentDate"  class="form-control form-control-sm ">
                    </div>

                </div>
                <!-- Additional Static Fields e.g., Books Fee, Registration Fee, Uniform Fee -->
                <div class="row custom-form-group">
                    <div class="col-md-4">
                        <label class="fs-6">رقم الطالب </label>
                        <select id="studentSelect" asp-items="ViewBag.listStudents" asp-for="StudentId" class="form-control form-control-sm ">
                            <option value="0">اختر الطالب</option>
                        </select>
                    </div>
                    <div class="col-md-8">
                        <label class="fs-6">اسم الطالب </label>
                        <input type="text"  id="studentName" asp-for="StudentName" class="form-control form-control-sm ">
                    </div>

                </div>

               
             
                <div class="row custom-form-group">
                    <div class="col-md-3">
                        <label class="fs-6">المبلغ</label>
                        <input type="number" asp-for="Amount"  id="amount" class="form-control form-control-sm" min="0">
                    </div>
                    <div class="col-md-9">
                        <label class="fs-6">تفنيد المبلغ</label>
                        <input type="text" asp-for="AmountName"  id="breakdown" class="form-control form-control-sm" readonly>
                        <input type="hidden" name="AmountName" id="hiddenBreakdown">

                    </div>
                </div>
                <br />
                <hr />
                <br />
                <div class="row custom-form-group">
                    <div class="col-md-3">
                        <label class="fs-6">   نوع الدفع  </label>
                        <select  class="form-control form-control-sm" asp-for="CashCheque" id="paymentMethod" onchange="toggleChequeDetails()">
                            <option value="1"> شيك</option>
                            <option value="2"> نقدي</option>
                        </select>
                    </div>
                    <div class="col-md-9">
                        <label class="fs-6">   وذلك  </label>
                        <input  type="text" id="purpose" asp-for="Purpose" class="form-control form-control-sm ">

                    </div>
                </div>
                <div class="row custom-form-group" id="chequeDetails">
                    <div class="col-md-4">
                        <label class="fs-6"> رقم الشيك     </label>
                        <input type="number" asp-for="ChequeNumber"  id="chequeNumber" class="form-control form-control-sm ">
                    </div>
                    <div class="col-md-4">
                        <label class="fs-6">   تاريخ الشيك    </label>
                        <input type="date" asp-for="ChequeDate"  id="chequeDate" class="form-control form-control-sm ">
                    </div>
                    <div class="col-md-4">
                        <label class="fs-6">اسم البنك</label>
                        <input type="text" asp-for="BankName" id="bankName" class="form-control form-control-sm ">
                    </div>
                </div>
                <!-- Submit Buttons -->
                <div class="form-group">
                    @if (currentUser.Level == UserLevels.Admin || currentUser.Level == UserLevels.Add || currentUser.Level == UserLevels.EditAdd)
                    {
                        <button type="button" class="btn btn-success btn-sm custom-button" id="btnAdd">حفظ</button>
                        <button type="button" id="btnPrint" class="btn btn-secondary btn-sm custom-button">الطباعة</button>
                    }
                    @if (currentUser.Level == UserLevels.Admin || currentUser.Level == UserLevels.EditAdd)
                    {
                        <button type="button" class="btn btn-secondary btn-sm custom-button" id="btnEdit">تعديل</button>
                    }
                    @if (currentUser.Level == UserLevels.Admin || currentUser.Level == UserLevels.View)
                    {
                        <button type="button" class="btn btn-danger btn-sm custom-button" id="btnDelete">حذف</button>
                    } 
                   
                </div>
            </form>

        </div>
    </div>
</div>
@section Scripts {
    <script>
 document.addEventListener("DOMContentLoaded", function () {
    let amountInput = document.getElementById("amount");
    let breakdownInput = document.getElementById("breakdown");

    amountInput.addEventListener("input", updateBreakdown);
    updateBreakdown();

    // Enable the breakdown field before form submission
            document.getElementById("paymentForm").addEventListener("submit", function () {
        breakdownInput.removeAttribute("disabled");
    });
});

function updateBreakdown() {
    let amountInput = document.getElementById("amount");
    let breakdownInput = document.getElementById("breakdown");
    let amount = parseInt(amountInput.value) || 0;
    breakdownInput.value = convertToArabicWords(amount) + " فقط لا غير";
}

function convertToArabicWords(num) {
    if (num === 0) return "صفر جنيهاً مصرياً";

    let ones = ["", "واحد", "اثنان", "ثلاثة", "أربعة", "خمسة", "ستة", "سبعة", "ثمانية", "تسعة"];
    let tens = ["", "", "عشرون", "ثلاثون", "أربعون", "خمسون", "ستون", "سبعون", "ثمانون", "تسعون"];
    let teens = ["عشرة", "أحد عشر", "اثنا عشر", "ثلاثة عشر", "أربعة عشر", "خمسة عشر", "ستة عشر", "سبعة عشر", "ثمانية عشر", "تسعة عشر"];
    let hundreds = ["", "مائة", "مئتان", "ثلاثمائة", "أربعمائة", "خمسمائة", "ستمائة", "سبعمائة", "ثمانمائة", "تسعمائة"];

    function convertChunk(n) {
        let result = "";
        if (n >= 100) {
            let hundredsPart = Math.floor(n / 100);
            let remainder = n % 100;
            result += hundreds[hundredsPart];

            if (remainder > 0) {
                result += " و " + convertChunk(remainder);
            }
            return result;
        }
        if (n >= 10 && n < 20) {
            return teens[n - 10];
        }
        if (n >= 20) {
            result += tens[Math.floor(n / 10)];
            let remainder = n % 10;
            if (remainder > 0) {
                result += " و " + ones[remainder];
            }
            return result;
        }
        return ones[n];
    }

    let words = [];

    if (num >= 1000000) {
        let millions = Math.floor(num / 1000000);
        words.push(millions === 1 ? "مليون" : millions === 2 ? "مليونان" : convertChunk(millions) + " ملايين");
        num %= 1000000;
    }

    if (num >= 1000) {
        let thousands = Math.floor(num / 1000);
        words.push(thousands === 1 ? "ألف" : thousands === 2 ? "ألفان" : thousands >= 3 && thousands <= 10 ? convertChunk(thousands) + " آلاف" : convertChunk(thousands) + " ألف");
        num %= 1000;
    }

    if (num > 0) {
        words.push(convertChunk(num));
    }

    return words.filter(word => word).join(" و ") + " جنيهاً مصرياً";
}
        document.addEventListener("DOMContentLoaded", function () {
            let amountInput = document.getElementById("amount");
            let breakdownInput = document.getElementById("breakdown");

            amountInput.addEventListener("input", updateBreakdown);
            updateBreakdown();

            // Enable the breakdown field before form submission
                    document.getElementById("paymentForm").addEventListener("submit", function () {
                breakdownInput.removeAttribute("disabled");
            });
        });

        function updateBreakdown() {
            let amountInput = document.getElementById("amount");
            let breakdownInput = document.getElementById("breakdown");
            let amount = parseInt(amountInput.value) || 0;
            breakdownInput.value = convertToArabicWords(amount) + " فقط لا غير";
        }

        function convertToArabicWords(num) {
            if (num === 0) return "صفر جنيهاً مصرياً";

            let ones = ["", "واحد", "اثنان", "ثلاثة", "أربعة", "خمسة", "ستة", "سبعة", "ثمانية", "تسعة"];
            let tens = ["", "", "عشرون", "ثلاثون", "أربعون", "خمسون", "ستون", "سبعون", "ثمانون", "تسعون"];
            let teens = ["عشرة", "أحد عشر", "اثنا عشر", "ثلاثة عشر", "أربعة عشر", "خمسة عشر", "ستة عشر", "سبعة عشر", "ثمانية عشر", "تسعة عشر"];
            let hundreds = ["", "مائة", "مئتان", "ثلاثمائة", "أربعمائة", "خمسمائة", "ستمائة", "سبعمائة", "ثمانمائة", "تسعمائة"];

            function convertChunk(n) {
                let result = "";
                if (n >= 100) {
                    let hundredsPart = Math.floor(n / 100);
                    let remainder = n % 100;
                    result += hundreds[hundredsPart];

                    if (remainder > 0) {
                        result += " و " + convertChunk(remainder);
                    }
                    return result;
                }
                if (n >= 10 && n < 20) {
                    return teens[n - 10];
                }
                if (n >= 20) {
                    result += tens[Math.floor(n / 10)];
                    let remainder = n % 10;
                    if (remainder > 0) {
                        result += " و " + ones[remainder];
                    }
                    return result;
                }
                return ones[n];
            }

            let words = [];

            if (num >= 1000000) {
                let millions = Math.floor(num / 1000000);
                words.push(millions === 1 ? "مليون" : millions === 2 ? "مليونان" : convertChunk(millions) + " ملايين");
                num %= 1000000;
            }

            if (num >= 1000) {
                let thousands = Math.floor(num / 1000);
                words.push(thousands === 1 ? "ألف" : thousands === 2 ? "ألفان" : thousands >= 3 && thousands <= 10 ? convertChunk(thousands) + " آلاف" : convertChunk(thousands) + " ألف");
                num %= 1000;
            }

            if (num > 0) {
                words.push(convertChunk(num));
            }

            return words.filter(word => word).join(" و ") + " جنيهاً مصرياً";
        }

    </script>
  
<script>
     document.addEventListener("DOMContentLoaded", function () {
        // الحصول على تاريخ اليوم بتنسيق YYYY-MM-DD
        let today = new Date().toISOString().split("T")[0];

        // تعيين التاريخ في حقل الإدخال
        document.getElementById("paymentDate").value = today;
    });
</script>
    <script>
        function toggleChequeDetails() {
            var paymentMethod = document.getElementById("paymentMethod").value;
            var chequeDetails = document.getElementById("chequeDetails");

            if (paymentMethod == "2") { // نقدي
                chequeDetails.style.display = "none";
            } else {
                chequeDetails.style.display = "flex"; // Show div
            }
        }

        // Run on page load to apply initial state
        window.onload = toggleChequeDetails;
    </script>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  
    <script>
        function calculateTotal() {
               let total = 0;

               // Loop through all input fields with the "custom-input" class
               $(".custom-input").each(function () {
                   let value = parseFloat($(this).val()) || 0;
                   total += value;
               });

               // Update the total amount field
               $("#amount").val(total.toFixed(2));
           }

           // Calculate total when the page loads
           calculateTotal();

           // Recalculate total whenever any input field changes
                 $(document).ready(function () {
            $("#btnPrint").click(function () {
                var voucherId = $("#paymentId").val();

                $.ajax({
                    url: "/Payment/Print",
                    type: "GET",
                    data: { id: voucherId },
                    success: function (data) {
                        var printWindow = window.open('', '', 'width=800,height=600');
                        printWindow.document.write(data);
                        printWindow.document.close();
                        printWindow.print();
                    },
                    error: function () {
                        alert("حدث خطأ أثناء جلب البيانات!");
                    }
                });
            });
        });

             $(document).ready(function () {

         $(document).on("input", ".custom-input", function () {
               calculateTotal();
           });
            $("#studentSelect").change(function () {
                var studentId =parseInt( $(this).val());
                       console.log(studentId)
                if (studentId == 0 || studentId === "") {
            Swal.fire({
                icon: 'warning',
                title: 'تنبيه',
                text: 'يرجى اختيار الطالب قبل المتابعة!',
                confirmButtonText: 'حسنًا'
            });
            return; // Stop execution
        }
                if (studentId) {
                    $.ajax({
                        url: '/Payment/GetStudentDetailsCost', // Your controller action
                        type: 'GET',
                        data: { id: studentId },
                        success: function (response) {
                            if (response) {
                                console.log(response);

                                // Set student details
                                $("#studentName").val(response.studentName);
                               

                              
                            }
                        },
                        error: function () {
                            alert("حدث خطأ أثناء جلب البيانات.");
                        }
                    });
                } else {
                    $("#studentDetails").html("");
                }
            });
             $.ajax({
                url: '@Url.Action("GetNextCode", "Payment")',
                type: 'GET',
                dataType: 'json',
                success: function (response) {
                    $('#paymentCode').val(response.nextCode);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.error("Error retrieving the next code:", errorThrown);
                }
            });
                     $("#btnAdd").click(function () {
            var errors = "";
             $("#hiddenBreakdown").val($("#breakdown").val());
            var studentId = $("#studentSelect").val();
          if (studentId == "0" || studentId == 0) {
              errors += "يرجى اختيار  كود الطالب.<br/>";
          }
            // Show errors if any
            if (errors !== "") {
                Swal.fire("خطأ", errors, "error");
                return;
            }
              var formData = new FormData($("#paymentForm")[0]);

            // Send form data via AJAX
            $.ajax({
                url: '@Url.Action("Add", "Payment")',
                type: 'POST',
                data: formData,
                processData: false, // Prevent jQuery from converting FormData into a query string
                contentType: false, // Required for FormData to work properly
                success: function (response) {
                    if (response.success) {
                        Swal.fire("نجاح", response.message, "success").then(function () {
                            location.reload();
                        });
                    } else {
                        Swal.fire("خطأ", response.message, "error");
                    }
                },
                error: function () {
                    Swal.fire("خطأ", "حدث خطأ أثناء الإرسال", "error");
                }
            });
        });





          $("#btnDelete").click(function () {
            // Get the record's ID from a hidden field or another element
            var id = parseInt($("#paymentId").val());

            if (!Number.isInteger(id) || id <= 0) {
                Swal.fire("تنبيه", "يرجى تحديد سجل صحيح أولاً.", "warning");
                return;
            }

            // Show confirmation dialog
            Swal.fire({
                title: 'هل أنت متأكد؟',
                text: "لن تتمكن من التراجع عن هذا الإجراء!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'نعم، احذفها!',
                cancelButtonText: 'إلغاء'
            }).then((result) => {
                if (result.isConfirmed) {
                    // If confirmed, send the delete request
                    $.ajax({
                        url: '@Url.Action("Delete", "Payment")',
                        type: 'POST',
                        data: { id: id },
                        success: function (response) {
                            if (response.success) {
                                Swal.fire("تم الحذف!", response.message, "success").then(function () {
                                    location.reload();
                                });
                            } else {
                                Swal.fire("خطأ", response.error || "حدث خطأ أثناء الحذف", "error");
                            }
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            Swal.fire("خطأ", "Error deleting data: " + errorThrown, "error");
                        }
                    });
                }
            });
        });

         // Handler for the Min button (gets record with minimum code)
                    $("#btnMin").click(async function () {
            try {
                const response = await $.ajax({
                    type: "GET",
                    url: '@Url.Action("GetMinPayment", "Payment")',
                    dataType: "json"
                });
                if (response) {
                    console.log(response)
                    // افترض أن الاستجابة تحتوي على الكائن بنفس أسماء الخصائص المذكورة في VWReceipt
                    $("#paymentId").val(response.id);
                    $("#paymentCode").val(response.code);
                    $("#studentName").val(response.studentName);
                    $("#paymentDate").val(response.chequeDate);
                    $("#studentSelect").val(response.studentId);
                  
                    $("#breakdown").val(response.amountName);
                    $("#paymentMethod").val(response.cashCheque);
                    $("#purpose").val(response.purpose);
                    $("#chequeNumber").val(response.chequeNumber);
                    $("#chequeDate").val(response.chequeDate);
                    $("#bankName").val(response.bankName);
                    $("#amount").val(response.amount);

                } else {
                    Swal.fire("خطأ", "لم يتم العثور على سجلات.", "error");
                }
            } catch (error) {
                console.error("Error fetching minimum file bus:", error);
                Swal.fire("خطأ", "حدث خطأ أثناء جلب البيانات.", "error");
            }
        });


            // Handler for the Max button (gets record with maximum code)
            $("#btnMax").click(async function () {
                try {
                    const response = await $.ajax({
                        type: "GET",
                        url: '@Url.Action("GetMaxPayment", "Payment")',
                        dataType: "json"
                    });
                    if (response) {
                        console.log(response)
                      $("#paymentId").val(response.id);
                    $("#paymentCode").val(response.code);
                    $("#studentName").val(response.studentName);
                    $("#paymentDate").val(response.chequeDate);
                    $("#studentSelect").val(response.studentId);

                    $("#breakdown").val(response.amountName);
                    $("#paymentMethod").val(response.cashCheque);
                    $("#purpose").val(response.purpose);
                    $("#chequeNumber").val(response.chequeNumber);
                    $("#chequeDate").val(response.chequeDate);
                    $("#bankName").val(response.bankName);
                    $("#amount").val(response.amount);
                    } else {
                        Swal.fire("خطأ", "No records found.", "error");
                    }
                } catch (error) {
                    console.error("Error fetching max national:", error);
                    Swal.fire("خطأ", "Error fetching data.", "error");
                }
            });

            // Handler for the Previous button
            $("#btnPrevious").click(async function () {
                const paymentId =parseInt( $("#paymentId").val());
                console.log(paymentId)
                console.log(typeof( paymentId))

                // if (!busId) {
                //     Swal.fire("تنبيه", "Please select a record first.", "warning");
                //     return;
                // }
                try {
                    const response = await $.ajax({
                        type: "GET",
                        url: '@Url.Action("GetPreviousPayment", "Payment", new { id = "ID_PLACEHOLDER" })'.replace("ID_PLACEHOLDER", paymentId),
                        dataType: "json"
                    });
                    if (response) {
                      $("#paymentId").val(response.id);
                    $("#paymentCode").val(response.code);
                    $("#studentName").val(response.studentName);
                    $("#paymentDate").val(response.chequeDate);
                    $("#studentSelect").val(response.studentId);

                    $("#breakdown").val(response.amountName);
                    $("#paymentMethod").val(response.cashCheque);
                    $("#purpose").val(response.purpose);
                    $("#chequeNumber").val(response.chequeNumber);
                    $("#chequeDate").val(response.chequeDate);
                    $("#bankName").val(response.bankName);
                    $("#amount").val(response.amount);
                    } else {
                        Swal.fire("تنبيه", "No previous record found.", "info");
                    }
                } catch (error) {
                     // If the status code is 404, display a specific warning message.
        if (error.status == 404) {
            Swal.fire("تنبيه", "لا يوجد سند  قبل تلك", "info");
        } else {
            console.error("Error fetching previous national:", error);
            Swal.fire("خطأ", "Error fetching data.", "error");
        }
                }
            });

            // Handler for the Next button
            $("#btnNext").click(async function () {
                const paymentId = parseInt($("#paymentId").val());
                 console.log(paymentId)
                console.log(typeof( paymentId))
                // if (!busId) {
                //     Swal.fire("تنبيه", "Please select a record first.", "warning");
                //     return;
                // }
                try {
                    const response = await $.ajax({
                        type: "GET",
                        url: '@Url.Action("GetNextPayment", "Payment", new { id = "ID_PLACEHOLDER" })'.replace("ID_PLACEHOLDER", paymentId),
                        dataType: "json"
                    });
                    if (response) {

                           console.log(response)
                        $("#paymentId").val(response.id);
                    $("#paymentCode").val(response.code);
                    $("#studentName").val(response.studentName);
                    $("#paymentDate").val(response.chequeDate);
                    $("#studentSelect").val(response.studentId);

                    $("#breakdown").val(response.amountName);
                    $("#paymentMethod").val(response.cashCheque);
                    $("#purpose").val(response.purpose);
                    $("#chequeNumber").val(response.chequeNumber);
                    $("#chequeDate").val(response.chequeDate);
                    $("#bankName").val(response.bankName);
                    $("#amount").val(response.amount);
                    } else {
                        Swal.fire("تنبيه", "No next record found.", "info");
                    }
                } catch (error) {
                    // If the status code is 404, display a specific warning message.
        if (error.status == 404) {
            Swal.fire("تنبيه", "لا يوجد  سند بعد تلك.", "info");
        } else {
            console.error("Error fetching previous national:", error);
            Swal.fire("خطأ", "Error fetching data.", "error");
        }
                }
            });

















        });
             
            

    </script>



















}