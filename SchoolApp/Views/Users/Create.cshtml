@using SchoolApp.DAL.ViewModels
@model VWUser
<style>
    /* تقليل حجم المدخلات */
    .custom-input {
        font-size: 0.85rem;
        padding: 0.25rem 0.5rem;
    }

    /* تقليل الهوامش بين الحقول */
    .custom-form-group {
        margin-bottom: 0.5rem;
    }

    /* تقليل الهوامش حول الأزرار */
    .custom-button {
        margin: 0.2rem;
        padding: 0.3rem 0.5rem;
    }

</style>
<div class="col-12 grid-margin stretch-card">
    <div class="card">
        <div class="d-flex justify-content-between">
            <div class="m-0">
                <h1 class="card-title text-dark font-weight-bold fs-2">ملف المستخدمين </h1>
            </div>
            <div class="d-flex justify-content-end navigation-buttons">
                <div class="btn btn-primary btn-sm custom-button" id="btnMin">
                    <i class="fa fa-angle-double-right"></i>
                </div>
                <div class="btn btn-primary btn-sm custom-button" id="btnPrevious">
                    <i class="fa fa-angle-right"></i>
                </div>
                <div class="btn btn-primary btn-sm custom-button" id="btnNext">
                    <i class="fa fa-angle-left"></i>
                </div>
                <div class="btn btn-primary btn-sm custom-button" id="btnMax">
                    <i class="fa fa-angle-double-left"></i>
                </div>
            </div>
        </div>

        <div class="card-body">
<form id="FormUser" class="form-container">
    <div class="row">
                    <input id="userId" asp-for="Id" type="hidden" />
        <div class="form-group col">
            <label asp-for="UserNumber">رقم المستخدم</label>
            <input id="UserCode" asp-for="UserNumber" class="form-control" />
        </div>

        <div class="form-group col">
            <label asp-for="UserName">اسم المستخدم</label>
            <input id="userName" asp-for="UserName" class="form-control" />
        </div>

        <div class="form-group col">
            <label asp-for="Password">كلمة السر</label>
            <input id="password" asp-for="Password" class="form-control" type="password" />
        </div>

        <div class="form-group col">
            <label asp-for="Level">المستوى</label>
            <select id="level" asp-for="Level" asp-items="ViewBag.ListLevels" class="form-control"></select>
        </div>
    </div>
   

    <fieldset>
        <legend>الصلاحيات</legend>
        <div class="row">
            <div class="form-check col">
                <input id="canAccessGrades" asp-for="CanAccessGrades" class="form-check-input" type="checkbox" />
                <label asp-for="CanAccessGrades" class="form-check-label">مراحل دراسية</label>
            </div>
            <div class="form-check col">
                            <input id="canAccessStudentsFile" asp-for="CanAccessStudentsFile" class="form-check-input" type="checkbox" />
                <label asp-for="CanAccessStudentsFile" class="form-check-label">ملف الطلبة</label>
            </div>
            <div class="form-check col">
                            <input id="canAccessBusesFile" asp-for="CanAccessBusesFile" class="form-check-input" type="checkbox" />
                <label asp-for="CanAccessBusesFile" class="form-check-label">ملف الباص</label>
            </div>
            <div class="form-check col">
                            <input id="canAccessTypesEncoming" asp-for="CanAccessTypesEncoming" class="form-check-input" type="checkbox" />
                <label asp-for="CanAccessTypesEncoming" class="form-check-label">انواع الإيرادات</label>
            </div>
           
        </div>
       <div class="row">
            <div class="form-check col">
                            <input id="canAccessPayments" asp-for="CanAccessPayments" class="form-check-input" type="checkbox" />
                <label asp-for="CanAccessPayments" class="form-check-label">سندات صرف</label>
            </div>
            <div class="form-check col">
                            <input id="canAccessPrintReports" asp-for="CanAccessPrintReports" class="form-check-input" type="checkbox" />
                <label asp-for="CanAccessPrintReports" class="form-check-label">طباعة التقارير</label>
            </div>
            <div class="form-check col">
                            <input id="canAccessSearch" asp-for="CanAccessSearch" class="form-check-input" type="checkbox" />
                <label asp-for="CanAccessSearch" class="form-check-label">استعلامات</label>
            </div>
            <div class="form-check col">
                            <input id="canAccessUsersFile" asp-for="CanAccessUsersFile" class="form-check-input" type="checkbox" />
                <label asp-for="CanAccessUsersFile" class="form-check-label">ملف المستخدمين</label>
            </div>
       </div>
        <div class="row">
            <div class="form-check col">
                            <input id="canAccessReceipts" asp-for="CanAccessReceipts" class="form-check-input" type="checkbox" />
                <label asp-for="CanAccessReceipts" class="form-check-label">سندات قبض</label>
            </div>
        </div>
    </fieldset>

                <div class="form-group">
                    <button type="button" id="btnAdd" class="btn btn-success btn-sm custom-button">حفظ</button>
                    <button type="button" id="btnEdit" class="btn btn-secondary btn-sm custom-button">تعديل</button>
                    <button type="button" id="btnDelete" class="btn btn-danger btn-sm custom-button">حذف</button>
                </div>
</form>
</div>
</div>
</div>


@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <!-- SweetAlert2 for alerts -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>


        $(document).ready(function () {
            // On page load, get the next available code from the server
            $.ajax({
                url: '@Url.Action("GetNextCode", "Users")',
                type: 'GET',
                dataType: 'json',
                success: function (response) {
                    $('#UserCode').val(response.nextCode);
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.error("Error retrieving the next code:", errorThrown);
                }
            });
                            $("#btnDelete").click(function () {
            var id = $("#userId").val();
            if (!id) {
                Swal.fire("تنبيه", "يرجى اختيار مستخدم أولاً", "warning");
                return;
            }

            Swal.fire({
                title: 'هل أنت متأكد؟',
                text: "لن تتمكن من التراجع عن هذا الإجراء!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'نعم، احذفه!',
                cancelButtonText: 'إلغاء'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '@Url.Action("Delete", "Users")',
                        type: 'POST',
                        data: { id: id },
                        success: function (response) {
                            if (response.success) {
                                Swal.fire("نجاح", response.message, "success").then(function () {
                                    location.reload();
                                });
                            } else {
                                Swal.fire("خطأ", response.message, "error");
                            }
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            var errMsg = "";
                            if (jqXHR.responseJSON) {
                                if (jqXHR.responseJSON.message) {
                                    errMsg = jqXHR.responseJSON.message;
                                } else if (jqXHR.responseJSON.errors) {
                                    if (Array.isArray(jqXHR.responseJSON.errors)) {
                                        errMsg = jqXHR.responseJSON.errors.join("<br/>");
                                    } else {
                                        $.each(jqXHR.responseJSON.errors, function (key, value) {
                                            errMsg += value.join("<br/>") + "<br/>";
                                        });
                                    }
                                } else {
                                    $.each(jqXHR.responseJSON, function (key, value) {
                                        errMsg += value.join("<br/>") + "<br/>";
                                    });
                                }
                            } else {
                                errMsg = errorThrown;
                            }

                            Swal.fire("خطأ", errMsg, "error");
                        }
                    });
                }
            });
        });


            // Handler for the Add button
             $("#btnAdd").click(function () {
          var errors = "";

          // Validate stage select
         
        // Display errors if any
        if (errors !== "") {
            $("#errorContainer").html(errors).show();
        }


          if (errors !== "") {
              Swal.fire("خطأ", errors, "error");
              return;
          }

          // Serialize form data (both static and dynamic)
          var formData = $("#FormUser").serialize();
          console.log(formData); // Debug

          $.ajax({
              url: '@Url.Action("Add", "Users")', // Adjust the URL as needed
              type: 'POST',
              data: formData,
              success: function (response) {
                  if (response.success) {
                      Swal.fire("نجاح", response.message, "success").then(function () {
                          location.reload();
                      });
                  } else {
                      Swal.fire("خطأ", response.message, "error");
                  }
              },
                     error: function (jqXHR, textStatus, errorThrown) {
            var errMsg = "";
            if (jqXHR.responseJSON) {
                if (jqXHR.responseJSON.message) {
                    errMsg = jqXHR.responseJSON.message;
                } else if (jqXHR.responseJSON.errors) {
                    // لو رجعنا errors من السيرفر (فيها لستة errors)
                    if (Array.isArray(jqXHR.responseJSON.errors)) {
                        errMsg = jqXHR.responseJSON.errors.join("<br/>");
                    } else {
                        $.each(jqXHR.responseJSON.errors, function (key, value) {
                            errMsg += value.join("<br/>") + "<br/>";
                        });
                    }
                } else {
                    $.each(jqXHR.responseJSON, function (key, value) {
                        errMsg += value.join("<br/>") + "<br/>";
                    });
                }
            } else {
                errMsg = errorThrown;
            }

            Swal.fire("خطأ", errMsg, "error");
        }

          });
        });


            // Handler for the Edit button
            $("#btnEdit").click(function () {
                   // Serialize form data (both static and dynamic)
          var formData = $("#FormUser").serialize();
          console.log(formData); // Debug


                // AJAX call for EditNational
                $.ajax({
              url: '@Url.Action("Edit", "Users")', // Adjust the URL as needed
              type: 'POST',
              data: formData,
              success: function (response) {
                  if (response.success) {
                      Swal.fire("نجاح", response.message, "success").then(function () {
                          location.reload();
                      });
                  } else {
                      Swal.fire("خطأ", response.message, "error");
                  }
              },
                     error: function (jqXHR, textStatus, errorThrown) {
            var errMsg = "";
            if (jqXHR.responseJSON) {
                if (jqXHR.responseJSON.message) {
                    errMsg = jqXHR.responseJSON.message;
                } else if (jqXHR.responseJSON.errors) {
                    // لو رجعنا errors من السيرفر (فيها لستة errors)
                    if (Array.isArray(jqXHR.responseJSON.errors)) {
                        errMsg = jqXHR.responseJSON.errors.join("<br/>");
                    } else {
                        $.each(jqXHR.responseJSON.errors, function (key, value) {
                            errMsg += value.join("<br/>") + "<br/>";
                        });
                    }
                } else {
                    $.each(jqXHR.responseJSON, function (key, value) {
                        errMsg += value.join("<br/>") + "<br/>";
                    });
                }
            } else {
                errMsg = errorThrown;
            }

            Swal.fire("خطأ", errMsg, "error");
        }

          });
            });

            // Handler for the Min button (gets record with minimum code)
            $("#btnMin").click(async function () {
                try {
                    const response = await $.ajax({
                        type: "GET",
                        url: '@Url.Action("GetMin", "Users")',
                        dataType: "json"
                    });
                    if (response) {
                        console.log(response)
                        $("#userId").val(response.id);
                        $("#UserCode").val(response.userNumber);
                        $("#password").val(response.password);
                        $("#level").val(response.level);
                        $("#canAccessGrades").prop("checked",response.canAccessGrades);
                        $("#canAccessStudentsFile").prop("checked",response.canAccessStudentsFile);
                        $("#canAccessBusesFile").prop("checked",response.canAccessBusesFile);
                        $("#canAccessTypesEncoming").prop("checked",response.canAccessTypesEncoming);
                        $("#canAccessPayments").prop("checked",response.canAccessPayments);
                        $("#canAccessPrintReports").prop("checked",response.canAccessPrintReports);
                        $("#canAccessSearch").prop("checked",response.canAccessSearch);
                        $("#canAccessUsersFile").prop("checked",response.canAccessUsersFile);
                        $("#canAccessReceipts").prop("checked",response.canAccessReceipts);
                    } else {
                        Swal.fire("خطأ", "No records found.", "error");
                    }
                } catch (error) {
                    console.error("Error fetching min national:", error);
                    Swal.fire("خطأ", "Error fetching data.", "error");
                }
            });

            // Handler for the Max button (gets record with maximum code)
            $("#btnMax").click(async function () {
                try {
                    const response = await $.ajax({
                        type: "GET",
                        url: '@Url.Action("GetMax", "Users")',
                        dataType: "json"
                    });
                    if (response) {
                        console.log(response)
                        $("#userId").val(response.id);
                        $("#UserCode").val(response.userNumber);
                        $("#password").val(response.password);
                        $("#level").val(response.level);
                         $("#canAccessGrades").prop("checked",response.canAccessGrades);
                        $("#canAccessStudentsFile").prop("checked",response.canAccessStudentsFile);
                        $("#canAccessBusesFile").prop("checked",response.canAccessBusesFile);
                        $("#canAccessTypesEncoming").prop("checked",response.canAccessTypesEncoming);
                        $("#canAccessPayments").prop("checked",response.canAccessPayments);
                        $("#canAccessPrintReports").prop("checked",response.canAccessPrintReports);
                        $("#canAccessSearch").prop("checked",response.canAccessSearch);
                        $("#canAccessUsersFile").prop("checked",response.canAccessUsersFile);
                        $("#canAccessReceipts").prop("checked",response.canAccessReceipts);
                    } else {
                        Swal.fire("خطأ", "No records found.", "error");
                    }
                } catch (error) {
                    console.error("Error fetching max national:", error);
                    Swal.fire("خطأ", "Error fetching data.", "error");
                }
            });

            // Handler for the Previous button
            $("#btnPrevious").click(async function () {
                const nationalId = $("#userId").val();
                if (!nationalId) {
                    Swal.fire("تنبيه", "Please select a record first.", "warning");
                    return;
                }
                try {
                    const response = await $.ajax({
                        type: "GET",
                        url: '@Url.Action("GetPrevious", "Users", new { id = "ID_PLACEHOLDER" })'.replace("ID_PLACEHOLDER", nationalId),
                        dataType: "json"
                    });
                    if (response) {
                        console.log(response)
                        $("#userId").val(response.id);
                        $("#UserCode").val(response.userNumber);
                        $("#password").val(response.password);
                        $("#level").val(response.level);
                         $("#canAccessGrades").prop("checked",response.canAccessGrades);
                        $("#canAccessStudentsFile").prop("checked",response.canAccessStudentsFile);
                        $("#canAccessBusesFile").prop("checked",response.canAccessBusesFile);
                        $("#canAccessTypesEncoming").prop("checked",response.canAccessTypesEncoming);
                        $("#canAccessPayments").prop("checked",response.canAccessPayments);
                        $("#canAccessPrintReports").prop("checked",response.canAccessPrintReports);
                        $("#canAccessSearch").prop("checked",response.canAccessSearch);
                        $("#canAccessUsersFile").prop("checked",response.canAccessUsersFile);
                        $("#canAccessReceipts").prop("checked",response.canAccessReceipts);
                    }  else {
                        Swal.fire("تنبيه", "No previous record found.", "info");
                    }
                } catch (error) {
                     // If the status code is 404, display a specific warning message.
        if (error.status == 404) {
            Swal.fire("تنبيه", "لا يوجد جنسية قبل تلك", "info");
        } else {
            console.error("Error fetching previous national:", error);
            Swal.fire("خطأ", "Error fetching data.", "error");
        }
                }
            });

            // Handler for the Next button
            $("#btnNext").click(async function () {
                const nationalId = $("#userId").val();
                if (!nationalId) {
                    Swal.fire("تنبيه", "Please select a record first.", "warning");
                    return;
                }
                try {
                    const response = await $.ajax({
                        type: "GET",
                        url: '@Url.Action("GetNext", "Users", new { id = "ID_PLACEHOLDER" })'.replace("ID_PLACEHOLDER", nationalId),
                        dataType: "json"
                    });
                     if (response) {
                        console.log(response)
                        $("#userId").val(response.id);
                        $("#UserCode").val(response.userNumber);
                        $("#password").val(response.password);
                        $("#level").val(response.level);
                         $("#canAccessGrades").prop("checked",response.canAccessGrades);
                        $("#canAccessStudentsFile").prop("checked",response.canAccessStudentsFile);
                        $("#canAccessBusesFile").prop("checked",response.canAccessBusesFile);
                        $("#canAccessTypesEncoming").prop("checked",response.canAccessTypesEncoming);
                        $("#canAccessPayments").prop("checked",response.canAccessPayments);
                        $("#canAccessPrintReports").prop("checked",response.canAccessPrintReports);
                        $("#canAccessSearch").prop("checked",response.canAccessSearch);
                        $("#canAccessUsersFile").prop("checked",response.canAccessUsersFile);
                        $("#canAccessReceipts").prop("checked",response.canAccessReceipts);
                    } else {
                        Swal.fire("تنبيه", "No next record found.", "info");
                    }
                } catch (error) {
                    // If the status code is 404, display a specific warning message.
        if (error.status == 404) {
            Swal.fire("تنبيه", "لا يوجد جنسية بعد تلك.", "info");
        } else {
            console.error("Error fetching previous national:", error);
            Swal.fire("خطأ", "Error fetching data.", "error");
        }
                }
            });
        });
    </script>
}